{"version":3,"sources":["helpers/GameContext.js","styled-components/App.styled.js","styled-components/Buttons.styled.js","Assets/AppLogo/AppLogo.js","components/LandingPage.js","styled-components/Board.styled.js","helpers/utility.js","styled-components/Animations.styled.js","components/sub-components/Overlay.js","components/sub-components/KeyboardKeys.js","components/sub-components/BoardHeader.js","styled-components/Leaderboards.styled.js","components/sub-components/ScoreBoard.js","components/sub-components/LeaderBoards.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["GameContext","React","createContext","GameProvider","Provider","Consumer","window","innerHeight","innerWidth","defaultValues","size","screenmode","AppWrapper","styled","div","_templateObject","props","LandingPageWrapper","_templateObject2","KeyboardWrapper","_templateObject3","LeaderBoardsWrapper","_templateObject4","AppOverlay","_templateObject5","MB1","_templateObject6","GameButton","button","Buttons_styled_templateObject","LandingPageButton","Buttons_styled_templateObject2","ArrowTableWrapper","table","Buttons_styled_templateObject3","KeyboardButton","Buttons_styled_templateObject4","isClicked","AnimatedText","react_default","a","createElement","viewBox","id","textAnchor","x","y","className","xlinkHref","AppLogo","AppLogo_AnimatedText","LandingPage","Assets_AppLogo_AppLogo","onClick","initializeGame","alert","GridWrapper","Board_styled_templateObject","concat","Grid","Board_styled_templateObject2","GridCell","Board_styled_templateObject3","foodCell","snakeCell","wallCell","BoardheadWrapper","Board_styled_templateObject4","PlayernameWrapper","span","Board_styled_templateObject5","ScoreWrapper","Board_styled_templateObject6","shallowEquals","arr1","arr2","length","equals","i","arrayDiff","map","SpinningLoader","Animations_styled_templateObject","Overlay","_useContext","useContext","status","Fragment","startGame","snake","KeyboardKeys","keypressed","setDirection","keyCode","index_esm","BoardHeader","score","fa_index_esm","LeaderboardMainWrapper","Leaderboards_styled_templateObject","ScoreBoardWrapper","Leaderboards_styled_templateObject2","RankHead","Leaderboards_styled_templateObject3","RankWrapper","Leaderboards_styled_templateObject4","StyledName","Leaderboards_styled_templateObject5","TableWrapper","Leaderboards_styled_templateObject6","RankTD","td","_templateObject7","nodata","RankScore","_templateObject8","StyledTrophy","FaTrophy","_templateObject9","rank","RankTrophy","ScoreBoard","rankrows","ranking","item","Leaderboards_styled_RankTrophy","ign","header","LeaderBoards","data","hard","medium","easy","sub_components_ScoreBoard","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","moveFood","parseInt","Math","random","numCells","foodDoesntOverlapSnake","setState","food","_ref","state","changeDirection","forEach","dir","indexOf","direction","resetKeypressed","setTimeout","moveSnake","newSnake","push","apply","slice","s","checkIfAteFood","isValid","doesntOverlap","endGame","newSnakeSegment","lastSegment","lastPositionOptions","cell","filter","c","speed","removeTimers","moveSnakeInterval","setInterval","el","focus","clearInterval","moveFoodTimeout","clearTimeout","_this2","_this3","_this$context","context","celldivisor","floor","cellSize","cellIndexes","Array","from","keys","cells","key","sub_components_LeaderBoards","onKeyDown","ref","tabIndex","sub_components_BoardHeader","sub_components_Overlay","sub_components_KeyboardKeys","Component","contextType","App","isUserRegistered","value","components_Game","components_LandingPage","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.acb7b3e8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst GameContext = React.createContext({});\r\n\r\nexport const GameProvider = GameContext.Provider;\r\nexport const GameConsumer = GameContext.Consumer;\r\n\r\n//get screensize to determine grid\r\nconst { innerHeight, innerWidth } = window;\r\nconst size = innerHeight < innerWidth ? innerHeight * 0.8 : innerWidth;\r\nconst screenmode = innerHeight < innerWidth ? \"web\" : \"mobile\";\r\n\r\nexport const defaultValues = { size, screenmode };\r\n\r\nexport default GameContext;","import styled from 'styled-components';\r\n\r\nexport const AppWrapper = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  top: 0;\r\n  text-align: center;\r\n  background-color: #282c34;\r\n  display: flex;\r\n  flex-direction: ${props => props.screenmode===\"web\" ? 'row' : 'column'};\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n`;\r\n\r\nexport const LandingPageWrapper = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  top: 0;\r\n  background-color: #030321;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: white;\r\n  font-size: 1.2rem;\r\n  z-index: 1021;\r\n`;\r\n\r\nexport const KeyboardWrapper = styled.div`\r\n  flex: 1;\r\n  position: relative;\r\n  height: ${props => props.screenmode===\"web\" ? '100vh': 'auto'};\r\n`;\r\n\r\nexport const LeaderBoardsWrapper = styled.div`\r\n  flex: 1;\r\n  position: relative;\r\n  height: ${props => props.screenmode===\"web\" ? '100vh': 'auto'};\r\n`;\r\n\r\nexport const AppOverlay = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  top: 0;\r\n  background-color: rgb(0, 0, 0, .9);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: white;\r\n  font-size: 1.2rem;\r\n  z-index: 1021;\r\n`;\r\n\r\nexport const MB1 = styled.div`\r\n  margin-bottom: 1rem;\r\n`;","import styled from 'styled-components';\r\n\r\nexport const GameButton = styled.button`\r\n    background-color : blue;\r\n    color: white;\r\n    border-radius: 3px;\r\n    border: 2px solid blue;\r\n    padding: .75rem 1rem;\r\n    font-size: 1rem;\r\n    cursor: pointer;\r\n    box-shadow: 0 0 10px black;\r\n\r\n    &:hover, &:focus, &:active {\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nexport const LandingPageButton = styled.button`\r\n    width: 250px;\r\n    background-color : #003d98;\r\n    color: white;\r\n    border-radius: 50px;\r\n    border: 0;\r\n    padding: 1rem 1rem;\r\n    font-size: 1rem;\r\n    cursor: pointer;\r\n    box-shadow: 0 0 10px black;\r\n    letter-spacing: 0.2rem;\r\n\r\n    &:hover, &:focus, &:active {\r\n        background-color : #002356;\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nexport const ArrowTableWrapper = styled.table`\r\n    border: 0;\r\n    position: absolute;\r\n    left: 50%;\r\n    margin-left: -126px;\r\n    bottom: ${props => props.screenmode===\"web\" ? '3.5rem': '0.5rem' };\r\n    border-spacing: 0;\r\n    border-collapse: collapse;\r\n`;\r\n\r\nexport const KeyboardButton = styled.button`\r\n    color: rgb(51, 51, 51);\r\n    border-radius: 3px;\r\n    border: 0;\r\n    cursor: pointer;\r\n    margin: 0.3rem;\r\n    background-color : ${props => props.isClicked ? '#A9A9A9' : '#eee' };\r\n    padding: ${props => props.screenmode===\"web\" ? \"1.25rem 1.5rem\" : \"1rem 1.5rem\"};\r\n    font-size: ${props => props.screenmode==='web' ? '2rem' : '1.5rem'};\r\n    /* box-shadow: 0 0 10px black; */\r\n\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n\r\n    &:hover, &:active {\r\n        outline: none;\r\n        background-color : #A9A9A9;\r\n    }\r\n`;","import React from 'react';\r\nimport './AppLogo.css';\r\n\r\nconst AnimatedText = () => {\r\n    return (\r\n        <svg viewBox=\"0 0 500 156\">\r\n            <symbol id=\"s-text\">\r\n                <text textAnchor=\"middle\" x=\"50%\" y=\"50%\">React-Snek</text>\r\n            </symbol>\r\n\r\n            <g className=\"g-ants\">\r\n                <use xlinkHref=\"#s-text\" className=\"text-copy\"></use>\r\n                <use xlinkHref=\"#s-text\" className=\"text-copy\"></use>\r\n                <use xlinkHref=\"#s-text\" className=\"text-copy\"></use>\r\n                <use xlinkHref=\"#s-text\" className=\"text-copy\"></use>\r\n                <use xlinkHref=\"#s-text\" className=\"text-copy\"></use>\r\n            </g>\r\n        </svg>\r\n    )\r\n}\r\n\r\nconst AppLogo = () => {\r\n    return (\r\n        <div className=\"logo-background\">\r\n            <div className=\"svg-wrapper\"><AnimatedText /></div>\r\n            <div className=\"logo-subtext\">Classic Snake Online</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppLogo;","import React from 'react';\r\nimport { LandingPageWrapper, MB1 } from '../styled-components/App.styled';\r\nimport { LandingPageButton } from '../styled-components/Buttons.styled';\r\nimport AppLogo from '../Assets/AppLogo/AppLogo';\r\n\r\nconst LandingPage = props => {\r\n    return (\r\n        <LandingPageWrapper>\r\n                <AppLogo />\r\n                <br /> <br />\r\n                <MB1>\r\n                    <LandingPageButton onClick={props.initializeGame}>Play Game!</LandingPageButton>\r\n                </MB1>\r\n                <MB1>\r\n                    <LandingPageButton onClick={() => alert(\"This feature is not yet available\")}>LeaderBoards</LandingPageButton>\r\n                </MB1>\r\n        </LandingPageWrapper>\r\n    );\r\n}\r\n\r\nexport default LandingPage;","import styled from 'styled-components';\r\n\r\nexport const GridWrapper = styled.div`\r\n  ${props => `height: ${props.size}px;\r\n              width: ${props.size}px;`};\r\n\r\n  ${props => props.screenmode===\"web\" ? `\r\n            margin-top: -5%\r\n            flex: 1;` \r\n            : `\r\n            margin-top: -10%\r\n            flex: 5;`};\r\n\r\n  &:hover, &:focus, &:active {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nexport const Grid = styled.div`\r\n    box-sizing: content-box;\r\n    padding: 0;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    position: relative;\r\n\r\n    ${props => `height: ${props.size}px;\r\n                width: ${props.size}px;`};\r\n\r\n    &:hover, &:focus, &:active {\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nexport const GridCell = styled.div`\r\n    ${props => `height: ${props.size}px;\r\n                width: ${props.size}px;`};\r\n\r\n    background-color: ${props => props.foodCell ? 'orange' : \r\n                                 props.snakeCell ? 'cyan' : \r\n                                 props.wallCell ? 'darkgray' : 'black'};\r\n                                 \r\n    border: ${props => props.foodCell || \r\n                       props.snakeCell || \r\n                       props.wallCell ? \"1px solid black\": \"0px\"};\r\n`;\r\n\r\nexport const BoardheadWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    flex-direction: row;\r\n    margin-bottom: 7px;\r\n    ${props => props.screenmode===\"mobile\" ? `\r\n            margin-left: 5%;\r\n            width: 90%;\r\n            font-size: 1rem;`\r\n            : `\r\n            width: 100%;\r\n            font-size: 1.5rem;`};\r\n`;\r\n\r\nexport const PlayernameWrapper = styled.span`\r\n    color: orange;\r\n    font-weight: 600;\r\n    margin-left: 5px;\r\n`;\r\n\r\nexport const ScoreWrapper = styled.div`\r\n    color: yellow;\r\n    font-weight: 600;\r\n`;","export const shallowEquals = (arr1, arr2) => {\r\n    if (!arr1 || !arr2 || arr1.length !== arr2.length) return false;\r\n    let equals = true;\r\n    for (var i = 0; i < arr1.length; i++) {\r\n        if (arr1[i] !== arr2[i]) equals = false;\r\n    }\r\n    return equals;\r\n}\r\n\r\nexport const arrayDiff = (arr1, arr2) => {\r\n    return arr1.map((a, i)=>{ \r\n        return a - arr2[i]\r\n    })\r\n}","import styled from 'styled-components';\r\n\r\nexport const SpinningLoader = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 64px;\r\n    height: 64px;\r\n\r\n    &:after {\r\n        content: \" \";\r\n        display: block;\r\n        border-radius: 50%;\r\n        width: 0;\r\n        height: 0;\r\n        margin: 6px;\r\n        box-sizing: border-box;\r\n        border: 26px solid #fff;\r\n        border-color: #fff transparent #fff transparent;\r\n        animation: lds-hourglass 1.2s infinite;\r\n    }\r\n\r\n    @keyframes lds-hourglass {\r\n        0% {\r\n            transform: rotate(0);\r\n            animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);\r\n        }\r\n        50% {\r\n            transform: rotate(900deg);\r\n            animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\r\n        }\r\n        100% {\r\n            transform: rotate(1800deg);\r\n        }\r\n    }\r\n`;","import React, { useContext } from 'react';\r\nimport GameContext from \"../../helpers/GameContext\";\r\n\r\nimport { AppOverlay, MB1 } from '../../styled-components/App.styled';\r\nimport { GameButton } from '../../styled-components/Buttons.styled';\r\nimport { SpinningLoader } from '../../styled-components/Animations.styled';\r\n\r\nconst Overlay = props => {\r\n    const { size, screenmode } = useContext(GameContext);\r\n\r\n    if (props.status === \"ingame\") return null;\r\n\r\n    return (\r\n        <AppOverlay size={size} screenmode={screenmode}>\r\n            { props.status === \"loading\" ? (\r\n                    <>\r\n                        <MB1><SpinningLoader /></MB1>\r\n                        <MB1>Initializing game...</MB1>\r\n                    </>\r\n                ) : \r\n              props.status === \"standby\" ? (\r\n                    <>\r\n                        <GameButton onClick={props.startGame}>\r\n                            Start game!\r\n                        </GameButton>\r\n                    </>\r\n                ) :\r\n              props.status === \"end\" ? (\r\n                    <>\r\n                        <MB1><b>GAME OVER!</b></MB1>\r\n                        <MB1>Your score: {props.snake.length - 4} </MB1>\r\n                        <GameButton onClick={props.startGame}>Start a new game</GameButton>\r\n                    </>\r\n                ) : null\r\n            }\r\n        </AppOverlay>\r\n    )\r\n    \r\n}\r\n\r\nexport default Overlay;","import React, { useContext } from 'react';\r\nimport GameContext from \"../../helpers/GameContext\";\r\n\r\nimport { KeyboardButton, ArrowTableWrapper } from '../../styled-components/Buttons.styled';\r\nimport { IoMdArrowDropup, IoMdArrowDropdown, IoMdArrowDropleft, IoMdArrowDropright } from 'react-icons/io';\r\n\r\nconst KeyboardKeys = props => {\r\n    const { screenmode } = useContext(GameContext);\r\n\r\n    return (\r\n        <ArrowTableWrapper screenmode={screenmode}>\r\n            <tbody>\r\n                <tr>\r\n                    <td></td>\r\n                    <td>\r\n                        <KeyboardButton \r\n                            screenmode={screenmode}\r\n                            isClicked={props.keypressed===38}\r\n                            onClick={() => props.setDirection({keyCode: 38})}>\r\n                            <IoMdArrowDropup />\r\n                        </KeyboardButton>\r\n                    </td>\r\n                    <td></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <KeyboardButton \r\n                            screenmode={screenmode}\r\n                            isClicked={props.keypressed===37}\r\n                            onClick={() => props.setDirection({keyCode: 37})}>\r\n                            <IoMdArrowDropleft />\r\n                        </KeyboardButton>\r\n                    </td>\r\n                    <td>\r\n                        <KeyboardButton \r\n                            screenmode={screenmode}\r\n                            isClicked={props.keypressed===40}\r\n                            onClick={() => props.setDirection({keyCode: 40})}>\r\n                            <IoMdArrowDropdown />\r\n                        </KeyboardButton>\r\n                    </td>\r\n                    <td>\r\n                        <KeyboardButton \r\n                            screenmode={screenmode}\r\n                            isClicked={props.keypressed===39}\r\n                            onClick={() => props.setDirection({keyCode: 39})}>\r\n                            <IoMdArrowDropright />\r\n                        </KeyboardButton>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </ArrowTableWrapper>\r\n    )\r\n};\r\n\r\nexport default KeyboardKeys;\r\n","import React, { useContext } from 'react';\r\nimport GameContext from \"../../helpers/GameContext\";\r\nimport { FaStar } from 'react-icons/fa';\r\n\r\nimport { BoardheadWrapper, PlayernameWrapper, ScoreWrapper } from '../../styled-components/Board.styled';\r\n\r\nconst BoardHeader = props => {\r\n    const { screenmode } = useContext(GameContext);\r\n    const score = props.snake.length - 4 > -1 ? props.snake.length - 4: 0;\r\n\r\n    return (\r\n        <BoardheadWrapper screenmode={screenmode}>\r\n            <div>Playing as\r\n                <PlayernameWrapper>Anonymous</PlayernameWrapper>\r\n            </div>\r\n            <ScoreWrapper>\r\n                <FaStar /> {score}\r\n            </ScoreWrapper>\r\n        </BoardheadWrapper>\r\n    );\r\n}\r\n\r\nexport default BoardHeader;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { FaTrophy } from 'react-icons/fa';\r\n\r\nexport const LeaderboardMainWrapper = styled.div`\r\n    margin: 7%;\r\n    height: 85%;\r\n`;\r\n\r\nexport const ScoreBoardWrapper = styled.div`\r\n    height: 30%;\r\n    background-color: black;\r\n    border: 5px solid rgb(99, 99, 99);\r\n    margin: 15px 0px;\r\n    border-radius: 15px;\r\n`;\r\n\r\nexport const RankHead = styled.div`\r\n    width: 100%;\r\n    height: 20%;\r\n    background: rgb(99, 99, 99);\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    letter-spacing: 3px;\r\n    font-weight: 500;\r\n`;\r\n\r\nexport const RankWrapper = styled.div`\r\n    min-height: 80%;\r\n    text-align: center;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nexport const StyledName = styled.span`\r\n    color: gray;\r\n`;\r\n\r\nexport const TableWrapper = styled.table`\r\n    width: 90%;\r\n`;\r\n\r\nexport const RankTD = styled.td`\r\n    font-size: 0.9rem;\r\n    ${props => !props.nodata ? `border-bottom: 0.5px solid rgb(99,99,99, 0.5);` : ``};\r\n\r\n    &:nth-child(1) {\r\n        width: 20%;\r\n        font-weight: bold;\r\n    }\r\n\r\n    &:nth-child(2) {\r\n        width: 60%;\r\n        text-align: left;\r\n        padding-left: 30px;\r\n    }\r\n\r\n    &:nth-child(3) {\r\n        width: 20%;\r\n        text-align: left;\r\n        padding-left: 10px;\r\n    }\r\n`;\r\n\r\nexport const RankScore = styled.div`\r\n    color: yellow;\r\n`;\r\n\r\nconst StyledTrophy = styled(FaTrophy)`\r\n    margin-left: -13px;\r\n    color: ${props => props.rank === 1 ? 'yellow' : props.rank === 2 ? 'gray' : 'orange' };\r\n`;\r\n\r\nexport const RankTrophy = props => {\r\n    if (props.rank > 3) { \r\n        return (\r\n            <>{ props.rank }</>\r\n        );\r\n    } else {\r\n        return (\r\n            <>\r\n                <StyledTrophy rank={props.rank} /> {props.rank}\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { FaStar } from 'react-icons/fa';\r\n\r\nimport { ScoreBoardWrapper, RankHead, RankWrapper, StyledName, TableWrapper, RankTD, RankScore, RankTrophy } from '../../styled-components/Leaderboards.styled';\r\n\r\nconst ScoreBoard = props => {\r\n\r\n    const rankrows = props.ranking.length > 0 ? props.ranking.map(item => (\r\n        <tr>\r\n            <RankTD>\r\n                <RankTrophy rank={item.rank} />\r\n            </RankTD>\r\n            <RankTD>\r\n                <StyledName>{item.ign}</StyledName>\r\n            </RankTD>\r\n            <RankTD>\r\n                <RankScore><FaStar /> {item.score}</RankScore>\r\n            </RankTD>\r\n        </tr>\r\n    )) : ( <RankTD nodata ><StyledName>NO DATA AVAILABLE</StyledName></RankTD> );\r\n\r\n    return (\r\n        <ScoreBoardWrapper>\r\n            <RankHead>{ props.header }</RankHead>\r\n            <RankWrapper>\r\n                <TableWrapper>\r\n                    <tbody>\r\n                        { rankrows }\r\n                    </tbody>\r\n                </TableWrapper>\r\n            </RankWrapper>\r\n        </ScoreBoardWrapper>\r\n    );\r\n}\r\n\r\nexport default ScoreBoard;","import React from 'react';\r\n\r\nimport { LeaderboardMainWrapper } from '../../styled-components/Leaderboards.styled';\r\n\r\nimport ScoreBoard from './ScoreBoard';\r\n\r\nconst LeaderBoards = () => {\r\n\r\n    const data = {\r\n        hard: [\r\n            { rank: 1, ign: \"OG.ana.bit\", score: 199 },\r\n            { rank: 2, ign: \"OG.Topson\", score: 78 },\r\n            { rank: 3, ign: \"OG.Jerax.ai\", score: 45 },\r\n            { rank: 4, ign: \"OG.Ceb\", score: 31 },\r\n            { rank: 5, ign: \"OG.Notail\", score: 21 }\r\n        ],\r\n        medium: [],\r\n        easy: []\r\n    }\r\n\r\n    return (\r\n        <LeaderboardMainWrapper>\r\n            L E A D E R B O A R D S\r\n            <ScoreBoard header=\"HARD\" ranking={data.hard} />\r\n            <ScoreBoard header=\"MEDIUM\" ranking={data.medium} />\r\n            <ScoreBoard header=\"EASY\" ranking={data.easy} />\r\n        </LeaderboardMainWrapper>\r\n    )\r\n}\r\n\r\nexport default LeaderBoards;\r\n","import React, { Component } from 'react'\r\nimport GameContext from '../helpers/GameContext';\r\n\r\nimport { AppWrapper, KeyboardWrapper, LeaderBoardsWrapper } from '../styled-components/App.styled';\r\nimport { GridWrapper, Grid, GridCell } from '../styled-components/Board.styled';\r\nimport { shallowEquals, arrayDiff } from '../helpers/utility';\r\n\r\nimport Overlay from './sub-components/Overlay';\r\nimport KeyboardKeys from './sub-components/KeyboardKeys';\r\nimport BoardHeader from './sub-components/BoardHeader';\r\nimport LeaderBoards from './sub-components/LeaderBoards';\r\n\r\nclass Game extends Component {\r\n    static contextType = GameContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          snake: [],\r\n          food: [],\r\n          // [loading, standby, ingame, end]\r\n          status: \"loading\",\r\n          // using keycodes to indicate direction\r\n          direction: 39,\r\n          keypressed: 0,\r\n          speed: 150\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n      setTimeout(() => this.setState({status: \"standby\"}), 2600);\r\n      this.el.focus();\r\n    }\r\n    \r\n    // randomly place snake food\r\n    moveFood = () => {\r\n        let x, y;\r\n    \r\n        do{\r\n          //this will prevent the food from respawning in the wall\r\n          do x = parseInt(Math.random() * this.numCells - 1); while(x===0);\r\n          do y = parseInt(Math.random() * this.numCells - 1); while(y===0);\r\n    \r\n          //this will prevent the food from respawning in snake body\r\n        } while(!this.foodDoesntOverlapSnake([x, y]));\r\n        \r\n        this.setState({ food: [x, y] });\r\n    }\r\n    \r\n    setDirection = ({ keyCode }) => {\r\n    \r\n        if (keyCode === 32 && (this.state.status === \"standby\" || this.state.status === \"end\")){\r\n          this.startGame();\r\n        }else{\r\n          // if it's the same direction or simply reversing, ignore\r\n          let changeDirection = true;\r\n          [[38, 40], [37, 39]].forEach(dir => {\r\n            if (dir.indexOf(this.state.direction) > -1 && dir.indexOf(keyCode) > -1) {\r\n              changeDirection = false;\r\n            }\r\n          });\r\n    \r\n          if ( keyCode===37 || keyCode===38 || keyCode===39 || keyCode===40 ) {\r\n            if (changeDirection) {\r\n              this.setState({ direction: keyCode, keypressed: keyCode }, () => this.resetKeypressed());\r\n            }else{\r\n              this.setState({ keypressed: keyCode }, () => this.resetKeypressed());\r\n            }\r\n          } \r\n        }\r\n    }\r\n    \r\n    //this will reset the focus of arrow buttons\r\n    resetKeypressed = () => {\r\n        setTimeout(() => this.setState({keypressed: 0}), 30)\r\n    }\r\n\r\n    moveSnake = () => {\r\n        const newSnake = [];\r\n        // set in the new \"head\" of the snake\r\n        switch (this.state.direction) {\r\n            // down\r\n          case 40:\r\n            newSnake[0] = [this.state.snake[0][0], this.state.snake[0][1] + 1];\r\n            break;\r\n            // up\r\n          case 38:\r\n            newSnake[0] = [this.state.snake[0][0], this.state.snake[0][1] - 1];\r\n            break;\r\n            // right\r\n          case 39:\r\n            newSnake[0] = [this.state.snake[0][0] + 1, this.state.snake[0][1]];\r\n            break;\r\n            // left\r\n          case 37:\r\n            newSnake[0] = [this.state.snake[0][0] - 1, this.state.snake[0][1]];\r\n            break;\r\n          default:\r\n        }\r\n        // now shift each \"body\" segment to the previous segment's position\r\n        [].push.apply(\r\n          newSnake,\r\n          this.state.snake.slice(1).map((s, i) => {\r\n            // since we're starting from the second item in the list,\r\n            // just use the index, which will refer to the previous item\r\n            // in the original list\r\n            return this.state.snake[i];\r\n          })\r\n        );\r\n    \r\n        this.setState({ snake: newSnake });\r\n    \r\n        this.checkIfAteFood(newSnake);\r\n        if (!this.isValid(newSnake[0]) || !this.doesntOverlap(newSnake)) {\r\n          // end the game\r\n          this.endGame()\r\n        } \r\n    }\r\n    \r\n    checkIfAteFood = newSnake => {\r\n        if (!shallowEquals(newSnake[0], this.state.food)) return\r\n          // snake gets longer\r\n          let newSnakeSegment;\r\n          const lastSegment = newSnake[newSnake.length - 1];\r\n    \r\n          // where should we position the new snake segment?\r\n          // here are some potential positions, we can choose the best looking one\r\n          let lastPositionOptions = [[-1, 0], [0, -1], [1, 0], [0, 1]];\r\n          \r\n          // the snake is moving along the y-axis, so try that instead\r\n          if ( newSnake.length > 1 ) {\r\n            lastPositionOptions[0] = arrayDiff(lastSegment, newSnake[newSnake.length - 2]);\r\n          }\r\n    \r\n          for (var i = 0; i < lastPositionOptions.length; i++) {\r\n            newSnakeSegment = [\r\n              lastSegment[0] + lastPositionOptions[i][0],\r\n              lastSegment[1] + lastPositionOptions[i][1]\r\n            ];\r\n            if (this.isValid(newSnakeSegment)) {\r\n              break;\r\n            }\r\n          }\r\n    \r\n          this.setState({\r\n            snake: newSnake.concat([newSnakeSegment]),\r\n            food: []\r\n          });\r\n        this.moveFood();\r\n    }\r\n      \r\n    // is the cell's position inside the grid?\r\n    isValid = cell => {\r\n        return (\r\n          cell[0] > 0 &&\r\n          cell[1] > 0 &&\r\n          cell[0] < this.numCells - 1 &&\r\n          cell[1] < this.numCells - 1\r\n        );\r\n    }\r\n    \r\n    foodDoesntOverlapSnake = food => {\r\n        return (\r\n          this.state.snake.slice(1).filter(c => {\r\n            return shallowEquals(food, c);\r\n          }).length === 0\r\n        );\r\n    }\r\n    \r\n    doesntOverlap = snake => {\r\n        return (\r\n          snake.slice(1).filter(c => {\r\n            return shallowEquals(snake[0], c);\r\n          }).length === 0\r\n        );\r\n    }\r\n    \r\n    startGame = () => {\r\n        const { speed } = this.state;\r\n    \r\n        this.removeTimers();\r\n        this.moveSnakeInterval = setInterval(this.moveSnake, speed);\r\n    \r\n        this.setState({\r\n          status: \"ingame\",\r\n          snake: [[5, 5], [4, 5], [3, 5], [2, 5]],\r\n          food: [10, 10],\r\n          direction: 39\r\n        });\r\n    \r\n        this.el.focus();\r\n    }\r\n      \r\n    endGame = () => {\r\n        this.removeTimers();\r\n        this.setState({\r\n          status : \"end\"\r\n        })\r\n    }\r\n    \r\n    removeTimers = () => {\r\n        if (this.moveSnakeInterval) clearInterval(this.moveSnakeInterval);\r\n        if (this.moveFoodTimeout) clearTimeout(this.moveFoodTimeout)\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        this.removeTimers();\r\n    }\r\n    \r\n    render() {\r\n        const { size, screenmode } = this.context;\r\n        //each cell should be approximately 15px(web)/10px(mobile) wide, so calculate how many we need\r\n        const celldivisor = screenmode === \"web\" ? 15 : 10;\r\n        this.numCells = Math.floor(size / celldivisor);\r\n        const cellSize = size / this.numCells;\r\n        const cellIndexes = Array.from(Array(this.numCells).keys());\r\n        const cells = cellIndexes.map(y => {\r\n          return cellIndexes.map(x => {\r\n            const foodCell = this.state.food[0] === x && this.state.food[1] === y;\r\n            let snakeCell = this.state.snake.filter(c => c[0] === x && c[1] === y);\r\n            snakeCell = snakeCell.length && snakeCell[0];\r\n            const wallCell = x === 0 || y === 0 || x === cellIndexes.length - 1 || y === cellIndexes.length - 1;\r\n    \r\n            return (\r\n              <GridCell\r\n                foodCell={foodCell}\r\n                snakeCell={snakeCell}\r\n                wallCell={wallCell}\r\n                size={cellSize}\r\n                key={x + \" \" + y}\r\n                />\r\n            );\r\n          });\r\n        });\r\n    \r\n        return (\r\n          <AppWrapper screenmode={screenmode} >\r\n            <LeaderBoardsWrapper screenmode={screenmode}>\r\n              <LeaderBoards />\r\n            </LeaderBoardsWrapper>\r\n    \r\n            <GridWrapper\r\n              screenmode={screenmode}\r\n              onKeyDown={this.setDirection}\r\n              size={size}\r\n              ref={el => (this.el = el)}\r\n              tabIndex={-1}>\r\n    \r\n                <BoardHeader snake={this.state.snake} />\r\n    \r\n                <Grid size={size}>\r\n                  <Overlay\r\n                    status={this.state.status}\r\n                    startGame={this.startGame}\r\n                    snake={this.state.snake} />\r\n                    \r\n                  {cells}\r\n                </Grid>\r\n                \r\n            </GridWrapper>\r\n    \r\n            <KeyboardWrapper screenmode={screenmode}>\r\n              <KeyboardKeys \r\n                setDirection={this.setDirection} \r\n                keypressed={this.state.keypressed} />\r\n            </KeyboardWrapper>\r\n          </AppWrapper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport { GameProvider, defaultValues } from './helpers/GameContext';\r\n\r\n//components\r\nimport LandinPage from './components/LandingPage';\r\nimport Game from './components/Game';\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      isUserRegistered: false\r\n    }\r\n  }\r\n\r\n  initializeGame = () => {\r\n    this.setState({ isUserRegistered: true });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <GameProvider value={defaultValues}>\r\n        {\r\n          this.state.isUserRegistered ? (\r\n            <Game />\r\n          ) : ( \r\n            <LandinPage initializeGame={this.initializeGame} />\r\n          )\r\n        }\r\n        \r\n      </GameProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}