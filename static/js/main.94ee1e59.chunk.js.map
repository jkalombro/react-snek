{"version":3,"sources":["helpers/GameContext.js","styled-components/App.styled.js","styled-components/Buttons.styled.js","Assets/AppLogo/AppLogo.js","components/LandingPage.js","styled-components/Board.styled.js","helpers/utility.js","styled-components/Animations.styled.js","components/sub-components/Overlay.js","components/sub-components/KeyboardKeys.js","components/sub-components/BoardHeader.js","styled-components/Leaderboards.styled.js","components/sub-components/ScoreBoard.js","components/sub-components/LeaderBoards.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["GameContext","React","createContext","GameProvider","Provider","Consumer","window","innerHeight","innerWidth","defaultValues","size","screenmode","AppWrapper","styled","div","_templateObject","props","LandingPageWrapper","_templateObject2","KeyboardWrapper","_templateObject3","LeaderBoardsWrapper","_templateObject4","AppOverlay","_templateObject5","MB1","_templateObject6","GameButton","button","Buttons_styled_templateObject","LandingPageButton","Buttons_styled_templateObject2","ArrowTableWrapper","table","Buttons_styled_templateObject3","KeyboardButton","Buttons_styled_templateObject4","isClicked","AnimatedText","react_default","a","createElement","viewBox","id","textAnchor","x","y","className","xlinkHref","AppLogo","AppLogo_AnimatedText","LandingPage","Assets_AppLogo_AppLogo","onClick","initializeGame","alert","GridWrapper","Board_styled_templateObject","concat","Grid","Board_styled_templateObject2","GridCell","Board_styled_templateObject3","foodCell","snakeCell","wallCell","BoardheadWrapper","Board_styled_templateObject4","PlayernameWrapper","span","Board_styled_templateObject5","ScoreWrapper","Board_styled_templateObject6","shallowEquals","arr1","arr2","length","equals","i","arrayDiff","map","SpinningLoader","Animations_styled_templateObject","Overlay","_useContext","useContext","status","Fragment","startGame","snake","KeyboardKeys","keypressed","setDirection","keyCode","index_esm","BoardHeader","score","fa_index_esm","LeaderboardMainWrapper","Leaderboards_styled_templateObject","ScoreBoardWrapper","Leaderboards_styled_templateObject2","RankHead","Leaderboards_styled_templateObject3","RankWrapper","Leaderboards_styled_templateObject4","StyledName","Leaderboards_styled_templateObject5","TableWrapper","Leaderboards_styled_templateObject6","RankTD","td","_templateObject7","nodata","RankScore","_templateObject8","StyledTrophy","FaTrophy","_templateObject9","rank","RankTrophy","ScoreBoard","rankrows","ranking","item","key","Leaderboards_styled_RankTrophy","ign","header","LeaderBoards","data","hard","medium","easy","sub_components_ScoreBoard","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","moveFood","parseInt","Math","random","numCells","foodDoesntOverlapSnake","setState","food","_ref","state","changeDirection","forEach","dir","indexOf","direction","resetKeypressed","setTimeout","moveSnake","newSnake","push","apply","slice","s","checkIfAteFood","isValid","doesntOverlap","endGame","newSnakeSegment","lastSegment","lastPositionOptions","cell","filter","c","speed","removeTimers","moveSnakeInterval","setInterval","el","focus","clearInterval","moveFoodTimeout","clearTimeout","_this2","_this3","_this$context","context","celldivisor","floor","cellSize","cellIndexes","Array","from","keys","cells","sub_components_LeaderBoards","onKeyDown","ref","tabIndex","sub_components_BoardHeader","sub_components_Overlay","sub_components_KeyboardKeys","Component","contextType","App","isUserRegistered","value","components_Game","components_LandingPage","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94ee1e59.chunk.js","sourcesContent":["import React from 'react'\n\nconst GameContext = React.createContext({});\n\nexport const GameProvider = GameContext.Provider;\nexport const GameConsumer = GameContext.Consumer;\n\n//get screensize to determine grid\nconst { innerHeight, innerWidth } = window;\nconst size = innerHeight < innerWidth ? innerHeight * 0.8 : innerWidth;\nconst screenmode = innerHeight < innerWidth ? \"web\" : \"mobile\";\n\nexport const defaultValues = { size, screenmode };\n\nexport default GameContext;","import styled from 'styled-components';\n\nexport const AppWrapper = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  text-align: center;\n  background-color: #282c34;\n  display: flex;\n  flex-direction: ${props => props.screenmode===\"web\" ? 'row' : 'column'};\n  align-items: center;\n  justify-content: center;\n  color: white;\n`;\n\nexport const LandingPageWrapper = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  background-color: #030321;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  font-size: 1.2rem;\n  z-index: 1021;\n`;\n\nexport const KeyboardWrapper = styled.div`\n  flex: 1;\n  position: relative;\n  height: ${props => props.screenmode===\"web\" ? '100vh': 'auto'};\n`;\n\nexport const LeaderBoardsWrapper = styled.div`\n  flex: 1;\n  position: relative;\n  height: ${props => props.screenmode===\"web\" ? '100vh': 'auto'};\n`;\n\nexport const AppOverlay = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  background-color: rgb(0, 0, 0, .9);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  font-size: 1.2rem;\n  z-index: 1021;\n`;\n\nexport const MB1 = styled.div`\n  margin-bottom: 1rem;\n`;","import styled from 'styled-components';\n\nexport const GameButton = styled.button`\n    background-color : blue;\n    color: white;\n    border-radius: 3px;\n    border: 2px solid blue;\n    padding: .75rem 1rem;\n    font-size: 1rem;\n    cursor: pointer;\n    box-shadow: 0 0 10px black;\n\n    &:hover, &:focus, &:active {\n        outline: none;\n    }\n`;\n\nexport const LandingPageButton = styled.button`\n    width: 250px;\n    background-color : #003d98;\n    color: white;\n    border-radius: 50px;\n    border: 0;\n    padding: 1rem 1rem;\n    font-size: 1rem;\n    cursor: pointer;\n    box-shadow: 0 0 10px black;\n    letter-spacing: 0.2rem;\n\n    &:hover, &:focus, &:active {\n        background-color : #002356;\n        outline: none;\n    }\n`;\n\nexport const ArrowTableWrapper = styled.table`\n    border: 0;\n    position: absolute;\n    left: 50%;\n    margin-left: -126px;\n    bottom: ${props => props.screenmode===\"web\" ? '3.5rem': '0.5rem' };\n    border-spacing: 0;\n    border-collapse: collapse;\n`;\n\nexport const KeyboardButton = styled.button`\n    color: rgb(51, 51, 51);\n    border-radius: 3px;\n    border: 0;\n    cursor: pointer;\n    margin: 0.3rem;\n    background-color : ${props => props.isClicked ? '#A9A9A9' : '#eee' };\n    padding: ${props => props.screenmode===\"web\" ? \"1.25rem 1.5rem\" : \"1rem 1.5rem\"};\n    font-size: ${props => props.screenmode==='web' ? '2rem' : '1.5rem'};\n    /* box-shadow: 0 0 10px black; */\n\n    &:focus {\n        outline: none;\n    }\n\n    &:hover, &:active {\n        outline: none;\n        background-color : #A9A9A9;\n    }\n`;","import React from 'react';\nimport './AppLogo.css';\n\nconst AnimatedText = () => {\n    return (\n        <svg viewBox=\"0 0 500 156\">\n            <symbol id=\"s-text\">\n                <text textAnchor=\"middle\" x=\"50%\" y=\"50%\">React-Snek</text>\n            </symbol>\n\n            <g className=\"g-ants\">\n                <use xlinkHref=\"#s-text\" className=\"text-copy\"></use>\n                <use xlinkHref=\"#s-text\" className=\"text-copy\"></use>\n                <use xlinkHref=\"#s-text\" className=\"text-copy\"></use>\n                <use xlinkHref=\"#s-text\" className=\"text-copy\"></use>\n                <use xlinkHref=\"#s-text\" className=\"text-copy\"></use>\n            </g>\n        </svg>\n    )\n}\n\nconst AppLogo = () => {\n    return (\n        <div className=\"logo-background\">\n            <div className=\"svg-wrapper\"><AnimatedText /></div>\n            <div className=\"logo-subtext\">Classic Snake Online</div>\n        </div>\n    )\n}\n\nexport default AppLogo;","import React from 'react';\nimport { LandingPageWrapper, MB1 } from '../styled-components/App.styled';\nimport { LandingPageButton } from '../styled-components/Buttons.styled';\nimport AppLogo from '../Assets/AppLogo/AppLogo';\n\nconst LandingPage = props => {\n    return (\n        <LandingPageWrapper>\n                <AppLogo />\n                <br /> <br />\n                <MB1>\n                    <LandingPageButton onClick={props.initializeGame}>Play Game!</LandingPageButton>\n                </MB1>\n                <MB1>\n                    <LandingPageButton onClick={() => alert(\"This feature is not yet available\")}>LeaderBoards</LandingPageButton>\n                </MB1>\n        </LandingPageWrapper>\n    );\n}\n\nexport default LandingPage;","import styled from 'styled-components';\n\nexport const GridWrapper = styled.div`\n  ${props => `height: ${props.size}px;\n              width: ${props.size}px;`};\n\n  ${props => props.screenmode===\"web\" ? `\n            margin-top: -5%\n            flex: 1;` \n            : `\n            margin-top: -10%\n            flex: 5;`};\n\n  &:hover, &:focus, &:active {\n    outline: none;\n  }\n`;\n\nexport const Grid = styled.div`\n    box-sizing: content-box;\n    padding: 0;\n    display: flex;\n    flex-wrap: wrap;\n    position: relative;\n\n    ${props => `height: ${props.size}px;\n                width: ${props.size}px;`};\n\n    &:hover, &:focus, &:active {\n        outline: none;\n    }\n`;\n\nexport const GridCell = styled.div`\n    ${props => `height: ${props.size}px;\n                width: ${props.size}px;`};\n\n    background-color: ${props => props.foodCell ? 'orange' : \n                                 props.snakeCell ? 'cyan' : \n                                 props.wallCell ? 'darkgray' : 'black'};\n                                 \n    border: ${props => props.foodCell || \n                       props.snakeCell || \n                       props.wallCell ? \"1px solid black\": \"0px\"};\n`;\n\nexport const BoardheadWrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    flex-direction: row;\n    margin-bottom: 7px;\n    ${props => props.screenmode===\"mobile\" ? `\n            margin-left: 5%;\n            width: 90%;\n            font-size: 1rem;`\n            : `\n            width: 100%;\n            font-size: 1.5rem;`};\n`;\n\nexport const PlayernameWrapper = styled.span`\n    color: orange;\n    font-weight: 600;\n    margin-left: 5px;\n`;\n\nexport const ScoreWrapper = styled.div`\n    color: yellow;\n    font-weight: 600;\n`;","export const shallowEquals = (arr1, arr2) => {\n    if (!arr1 || !arr2 || arr1.length !== arr2.length) return false;\n    let equals = true;\n    for (var i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) equals = false;\n    }\n    return equals;\n}\n\nexport const arrayDiff = (arr1, arr2) => {\n    return arr1.map((a, i)=>{ \n        return a - arr2[i]\n    })\n}","import styled from 'styled-components';\n\nexport const SpinningLoader = styled.div`\n    display: inline-block;\n    position: relative;\n    width: 64px;\n    height: 64px;\n\n    &:after {\n        content: \" \";\n        display: block;\n        border-radius: 50%;\n        width: 0;\n        height: 0;\n        margin: 6px;\n        box-sizing: border-box;\n        border: 26px solid #fff;\n        border-color: #fff transparent #fff transparent;\n        animation: lds-hourglass 1.2s infinite;\n    }\n\n    @keyframes lds-hourglass {\n        0% {\n            transform: rotate(0);\n            animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);\n        }\n        50% {\n            transform: rotate(900deg);\n            animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n        }\n        100% {\n            transform: rotate(1800deg);\n        }\n    }\n`;","import React, { useContext } from 'react';\nimport GameContext from \"../../helpers/GameContext\";\n\nimport { AppOverlay, MB1 } from '../../styled-components/App.styled';\nimport { GameButton } from '../../styled-components/Buttons.styled';\nimport { SpinningLoader } from '../../styled-components/Animations.styled';\n\nconst Overlay = props => {\n    const { size, screenmode } = useContext(GameContext);\n\n    if (props.status === \"ingame\") return null;\n\n    return (\n        <AppOverlay size={size} screenmode={screenmode}>\n            { props.status === \"loading\" ? (\n                    <>\n                        <MB1><SpinningLoader /></MB1>\n                        <MB1>Initializing game...</MB1>\n                    </>\n                ) : \n              props.status === \"standby\" ? (\n                    <>\n                        <GameButton onClick={props.startGame}>\n                            Start game!\n                        </GameButton>\n                    </>\n                ) :\n              props.status === \"end\" ? (\n                    <>\n                        <MB1><b>GAME OVER!</b></MB1>\n                        <MB1>Your score: {props.snake.length - 4} </MB1>\n                        <GameButton onClick={props.startGame}>Start a new game</GameButton>\n                    </>\n                ) : null\n            }\n        </AppOverlay>\n    )\n    \n}\n\nexport default Overlay;","import React, { useContext } from 'react';\nimport GameContext from \"../../helpers/GameContext\";\n\nimport { KeyboardButton, ArrowTableWrapper } from '../../styled-components/Buttons.styled';\nimport { IoMdArrowDropup, IoMdArrowDropdown, IoMdArrowDropleft, IoMdArrowDropright } from 'react-icons/io';\n\nconst KeyboardKeys = props => {\n    const { screenmode } = useContext(GameContext);\n\n    return (\n        <ArrowTableWrapper screenmode={screenmode}>\n            <tbody>\n                <tr>\n                    <td></td>\n                    <td>\n                        <KeyboardButton \n                            screenmode={screenmode}\n                            isClicked={props.keypressed===38}\n                            onClick={() => props.setDirection({keyCode: 38})}>\n                            <IoMdArrowDropup />\n                        </KeyboardButton>\n                    </td>\n                    <td></td>\n                </tr>\n                <tr>\n                    <td>\n                        <KeyboardButton \n                            screenmode={screenmode}\n                            isClicked={props.keypressed===37}\n                            onClick={() => props.setDirection({keyCode: 37})}>\n                            <IoMdArrowDropleft />\n                        </KeyboardButton>\n                    </td>\n                    <td>\n                        <KeyboardButton \n                            screenmode={screenmode}\n                            isClicked={props.keypressed===40}\n                            onClick={() => props.setDirection({keyCode: 40})}>\n                            <IoMdArrowDropdown />\n                        </KeyboardButton>\n                    </td>\n                    <td>\n                        <KeyboardButton \n                            screenmode={screenmode}\n                            isClicked={props.keypressed===39}\n                            onClick={() => props.setDirection({keyCode: 39})}>\n                            <IoMdArrowDropright />\n                        </KeyboardButton>\n                    </td>\n                </tr>\n            </tbody>\n        </ArrowTableWrapper>\n    )\n};\n\nexport default KeyboardKeys;\n","import React, { useContext } from 'react';\nimport GameContext from \"../../helpers/GameContext\";\nimport { FaStar } from 'react-icons/fa';\n\nimport { BoardheadWrapper, PlayernameWrapper, ScoreWrapper } from '../../styled-components/Board.styled';\n\nconst BoardHeader = props => {\n    const { screenmode } = useContext(GameContext);\n    const score = props.snake.length - 4 > -1 ? props.snake.length - 4: 0;\n\n    return (\n        <BoardheadWrapper screenmode={screenmode}>\n            <div>Playing as\n                <PlayernameWrapper>Anonymous</PlayernameWrapper>\n            </div>\n            <ScoreWrapper>\n                <FaStar /> {score}\n            </ScoreWrapper>\n        </BoardheadWrapper>\n    );\n}\n\nexport default BoardHeader;","import React from 'react';\nimport styled from 'styled-components';\nimport { FaTrophy } from 'react-icons/fa';\n\nexport const LeaderboardMainWrapper = styled.div`\n    margin: 7%;\n    height: 85%;\n`;\n\nexport const ScoreBoardWrapper = styled.div`\n    height: 30%;\n    background-color: black;\n    border: 5px solid rgb(99, 99, 99);\n    margin: 15px 0px;\n    border-radius: 15px;\n`;\n\nexport const RankHead = styled.div`\n    width: 100%;\n    height: 20%;\n    background: rgb(99, 99, 99);\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    letter-spacing: 3px;\n    font-weight: 500;\n`;\n\nexport const RankWrapper = styled.div`\n    min-height: 80%;\n    text-align: center;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\n\nexport const StyledName = styled.span`\n    color: gray;\n`;\n\nexport const TableWrapper = styled.table`\n    width: 90%;\n`;\n\nexport const RankTD = styled.td`\n    font-size: 0.9rem;\n    ${props => !props.nodata ? `border-bottom: 0.5px solid rgb(99,99,99, 0.5);` : ``};\n\n    &:nth-child(1) {\n        width: 20%;\n        font-weight: bold;\n    }\n\n    &:nth-child(2) {\n        width: 60%;\n        text-align: left;\n        padding-left: 30px;\n    }\n\n    &:nth-child(3) {\n        width: 20%;\n        text-align: left;\n        padding-left: 10px;\n    }\n`;\n\nexport const RankScore = styled.div`\n    color: yellow;\n`;\n\nconst StyledTrophy = styled(FaTrophy)`\n    margin-left: -13px;\n    color: ${props => props.rank === 1 ? 'yellow' : props.rank === 2 ? 'gray' : 'orange' };\n`;\n\nexport const RankTrophy = props => {\n    if (props.rank > 3) { \n        return (\n            <>{ props.rank }</>\n        );\n    } else {\n        return (\n            <>\n                <StyledTrophy rank={props.rank} /> {props.rank}\n            </>\n        );\n    }\n}","import React from 'react';\nimport { FaStar } from 'react-icons/fa';\n\nimport { ScoreBoardWrapper, RankHead, RankWrapper, StyledName, TableWrapper, RankTD, RankScore, RankTrophy } from '../../styled-components/Leaderboards.styled';\n\nconst ScoreBoard = props => {\n\n    const rankrows = props.ranking.length > 0 ? props.ranking.map(item => (\n        <tr key={item.rank}>\n            <RankTD>\n                <RankTrophy rank={item.rank} />\n            </RankTD>\n            <RankTD>\n                <StyledName>{item.ign}</StyledName>\n            </RankTD>\n            <RankTD>\n                <RankScore><FaStar /> {item.score}</RankScore>\n            </RankTD>\n        </tr>\n    )) : ( \n        <tr>\n            <RankTD nodata ><StyledName>NO DATA AVAILABLE</StyledName></RankTD>\n        </tr> \n    );\n\n    return (\n        <ScoreBoardWrapper>\n            <RankHead>{ props.header }</RankHead>\n            <RankWrapper>\n                <TableWrapper>\n                    <tbody>\n                        { rankrows }\n                    </tbody>\n                </TableWrapper>\n            </RankWrapper>\n        </ScoreBoardWrapper>\n    );\n}\n\nexport default ScoreBoard;","import React from 'react';\n\nimport { LeaderboardMainWrapper } from '../../styled-components/Leaderboards.styled';\n\nimport ScoreBoard from './ScoreBoard';\n\nconst LeaderBoards = () => {\n\n    const data = {\n        hard: [\n            { rank: 1, ign: \"OG.ana.bit\", score: 199 },\n            { rank: 2, ign: \"OG.Topson\", score: 78 },\n            { rank: 3, ign: \"OG.Jerax.ai\", score: 45 },\n            { rank: 4, ign: \"OG.Ceb\", score: 31 },\n            { rank: 5, ign: \"OG.Notail\", score: 21 }\n        ],\n        medium: [],\n        easy: []\n    }\n\n    return (\n        <LeaderboardMainWrapper>\n            L E A D E R B O A R D S\n            <ScoreBoard header=\"HARD\" ranking={data.hard} />\n            <ScoreBoard header=\"MEDIUM\" ranking={data.medium} />\n            <ScoreBoard header=\"EASY\" ranking={data.easy} />\n        </LeaderboardMainWrapper>\n    )\n}\n\nexport default LeaderBoards;\n","import React, { Component } from 'react'\nimport GameContext from '../helpers/GameContext';\n\nimport { AppWrapper, KeyboardWrapper, LeaderBoardsWrapper } from '../styled-components/App.styled';\nimport { GridWrapper, Grid, GridCell } from '../styled-components/Board.styled';\nimport { shallowEquals, arrayDiff } from '../helpers/utility';\n\nimport Overlay from './sub-components/Overlay';\nimport KeyboardKeys from './sub-components/KeyboardKeys';\nimport BoardHeader from './sub-components/BoardHeader';\nimport LeaderBoards from './sub-components/LeaderBoards';\n\nclass Game extends Component {\n    static contextType = GameContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          snake: [],\n          food: [],\n          // [loading, standby, ingame, end]\n          status: \"loading\",\n          // using keycodes to indicate direction\n          direction: 39,\n          keypressed: 0,\n          speed: 200\n        };\n    }\n    \n    componentDidMount() {\n      setTimeout(() => this.setState({status: \"standby\"}), 2600);\n      this.el.focus();\n    }\n    \n    // randomly place snake food\n    moveFood = () => {\n        let x, y;\n    \n        do{\n          //this will prevent the food from respawning in the wall\n          do x = parseInt(Math.random() * this.numCells - 1); while(x===0);\n          do y = parseInt(Math.random() * this.numCells - 1); while(y===0);\n    \n          //this will prevent the food from respawning in snake body\n        } while(!this.foodDoesntOverlapSnake([x, y]));\n        \n        this.setState({ food: [x, y] });\n    }\n    \n    setDirection = ({ keyCode }) => {\n    \n        if (keyCode === 32 && (this.state.status === \"standby\" || this.state.status === \"end\")){\n          this.startGame();\n        }else{\n          // if it's the same direction or simply reversing, ignore\n          let changeDirection = true;\n          [[38, 40], [37, 39]].forEach(dir => {\n            if (dir.indexOf(this.state.direction) > -1 && dir.indexOf(keyCode) > -1) {\n              changeDirection = false;\n            }\n          });\n    \n          if ( keyCode===37 || keyCode===38 || keyCode===39 || keyCode===40 ) {\n            if (changeDirection) {\n              this.setState({ direction: keyCode, keypressed: keyCode }, () => this.resetKeypressed());\n            }else{\n              this.setState({ keypressed: keyCode }, () => this.resetKeypressed());\n            }\n          } \n        }\n    }\n    \n    //this will reset the focus of arrow buttons\n    resetKeypressed = () => {\n        setTimeout(() => this.setState({keypressed: 0}), 30)\n    }\n\n    moveSnake = () => {\n        const newSnake = [];\n        // set in the new \"head\" of the snake\n        switch (this.state.direction) {\n            // down\n          case 40:\n            newSnake[0] = [this.state.snake[0][0], this.state.snake[0][1] + 1];\n            break;\n            // up\n          case 38:\n            newSnake[0] = [this.state.snake[0][0], this.state.snake[0][1] - 1];\n            break;\n            // right\n          case 39:\n            newSnake[0] = [this.state.snake[0][0] + 1, this.state.snake[0][1]];\n            break;\n            // left\n          case 37:\n            newSnake[0] = [this.state.snake[0][0] - 1, this.state.snake[0][1]];\n            break;\n          default:\n        }\n        // now shift each \"body\" segment to the previous segment's position\n        [].push.apply(\n          newSnake,\n          this.state.snake.slice(1).map((s, i) => {\n            // since we're starting from the second item in the list,\n            // just use the index, which will refer to the previous item\n            // in the original list\n            return this.state.snake[i];\n          })\n        );\n    \n        this.setState({ snake: newSnake });\n    \n        this.checkIfAteFood(newSnake);\n        if (!this.isValid(newSnake[0]) || !this.doesntOverlap(newSnake)) {\n          // end the game\n          this.endGame()\n        } \n    }\n    \n    checkIfAteFood = newSnake => {\n        if (!shallowEquals(newSnake[0], this.state.food)) return\n          // snake gets longer\n          let newSnakeSegment;\n          const lastSegment = newSnake[newSnake.length - 1];\n    \n          // where should we position the new snake segment?\n          // here are some potential positions, we can choose the best looking one\n          let lastPositionOptions = [[-1, 0], [0, -1], [1, 0], [0, 1]];\n          \n          // the snake is moving along the y-axis, so try that instead\n          if ( newSnake.length > 1 ) {\n            lastPositionOptions[0] = arrayDiff(lastSegment, newSnake[newSnake.length - 2]);\n          }\n    \n          for (var i = 0; i < lastPositionOptions.length; i++) {\n            newSnakeSegment = [\n              lastSegment[0] + lastPositionOptions[i][0],\n              lastSegment[1] + lastPositionOptions[i][1]\n            ];\n            if (this.isValid(newSnakeSegment)) {\n              break;\n            }\n          }\n    \n          this.setState({\n            snake: newSnake.concat([newSnakeSegment]),\n            food: []\n          });\n        this.moveFood();\n    }\n      \n    // is the cell's position inside the grid?\n    isValid = cell => {\n        return (\n          cell[0] > 0 &&\n          cell[1] > 0 &&\n          cell[0] < this.numCells - 1 &&\n          cell[1] < this.numCells - 1\n        );\n    }\n    \n    foodDoesntOverlapSnake = food => {\n        return (\n          this.state.snake.slice(1).filter(c => {\n            return shallowEquals(food, c);\n          }).length === 0\n        );\n    }\n    \n    doesntOverlap = snake => {\n        return (\n          snake.slice(1).filter(c => {\n            return shallowEquals(snake[0], c);\n          }).length === 0\n        );\n    }\n    \n    startGame = () => {\n        const { speed } = this.state;\n    \n        this.removeTimers();\n        this.moveSnakeInterval = setInterval(this.moveSnake, speed);\n    \n        this.setState({\n          status: \"ingame\",\n          snake: [[5, 5], [4, 5], [3, 5], [2, 5]],\n          food: [10, 10],\n          direction: 39\n        });\n    \n        this.el.focus();\n    }\n      \n    endGame = () => {\n        this.removeTimers();\n        this.setState({\n          status : \"end\"\n        })\n    }\n    \n    removeTimers = () => {\n        if (this.moveSnakeInterval) clearInterval(this.moveSnakeInterval);\n        if (this.moveFoodTimeout) clearTimeout(this.moveFoodTimeout)\n    }\n    \n    componentWillUnmount() {\n        this.removeTimers();\n    }\n    \n    render() {\n        const { size, screenmode } = this.context;\n        //each cell should be approximately 15px(web)/10px(mobile) wide, so calculate how many we need\n        const celldivisor = screenmode === \"web\" ? 15 : 10;\n        this.numCells = Math.floor(size / celldivisor);\n        const cellSize = size / this.numCells;\n        const cellIndexes = Array.from(Array(this.numCells).keys());\n        const cells = cellIndexes.map(y => {\n          return cellIndexes.map(x => {\n            const foodCell = this.state.food[0] === x && this.state.food[1] === y;\n            let snakeCell = this.state.snake.filter(c => c[0] === x && c[1] === y);\n            snakeCell = snakeCell.length && snakeCell[0];\n            const wallCell = x === 0 || y === 0 || x === cellIndexes.length - 1 || y === cellIndexes.length - 1;\n    \n            return (\n              <GridCell\n                foodCell={foodCell}\n                snakeCell={snakeCell}\n                wallCell={wallCell}\n                size={cellSize}\n                key={x + \" \" + y}\n                />\n            );\n          });\n        });\n    \n        return (\n          <AppWrapper screenmode={screenmode} >\n            <LeaderBoardsWrapper screenmode={screenmode}>\n              {screenmode===\"web\" ? <LeaderBoards /> : null}\n            </LeaderBoardsWrapper>\n    \n            <GridWrapper\n              screenmode={screenmode}\n              onKeyDown={this.setDirection}\n              size={size}\n              ref={el => (this.el = el)}\n              tabIndex={-1}>\n    \n                <BoardHeader snake={this.state.snake} />\n    \n                <Grid size={size}>\n                  <Overlay\n                    status={this.state.status}\n                    startGame={this.startGame}\n                    snake={this.state.snake} />\n                    \n                  {cells}\n                </Grid>\n                \n            </GridWrapper>\n    \n            <KeyboardWrapper screenmode={screenmode}>\n              <KeyboardKeys \n                setDirection={this.setDirection} \n                keypressed={this.state.keypressed} />\n            </KeyboardWrapper>\n          </AppWrapper>\n        );\n    }\n}\n\nexport default Game;\n","import React from 'react';\nimport { GameProvider, defaultValues } from './helpers/GameContext';\n\n//components\nimport LandinPage from './components/LandingPage';\nimport Game from './components/Game';\nclass App extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      isUserRegistered: false\n    }\n  }\n\n  initializeGame = () => {\n    this.setState({ isUserRegistered: true });\n  }\n\n  render() {\n    return(\n      <GameProvider value={defaultValues}>\n        {\n          this.state.isUserRegistered ? (\n            <Game />\n          ) : ( \n            <LandinPage initializeGame={this.initializeGame} />\n          )\n        }\n        \n      </GameProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}