{"version":3,"sources":["components/App.component.js","components/Board.components.js","helpers/utility.js","App.js","serviceWorker.js","index.js"],"names":["AppWrapper","styled","div","_templateObject","GridWrapper","_templateObject2","props","size","AppOverlay","_templateObject3","GameButton","button","_templateObject4","MB1","_templateObject5","Grid","Board_components_templateObject","GridCell","Board_components_templateObject2","foodCell","snakeCell","wallCell","shallowEquals","arr1","arr2","length","equals","i","arrayDiff","map","a","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","moveFood","x","y","parseInt","Math","random","numCells","setState","food","setDirection","_ref","keyCode","state","status","changeDirection","forEach","dir","indexOf","direction","startGame","moveSnake","newSnake","snake","push","apply","slice","s","checkIfAteFood","isValid","doesntOverlap","endGame","newSnakeSegment","lastSegment","lastPositionOptions","concat","cell","filter","c","removeTimers","moveSnakeInterval","setInterval","clearInterval","moveFoodTimeout","clearTimeout","el","focus","_this2","floor","overlay","cellSize","cellIndexes","Array","from","keys","cells","react_default","createElement","key","onClick","onKeyDown","ref","tabIndex","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a5ede659.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const AppWrapper = styled.div`\r\n  text-align: center;\r\n  background-color: #282c34;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n`;\r\n\r\nexport const GridWrapper = styled.div`\r\n  height: ${props => props.size + \"px\"};\r\n  width: ${props => props.size + \"px\"};\r\n\r\n  &:hover, &:focus, &:active {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nexport const AppOverlay = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  top: 0;\r\n  background-color: rgb(0, 0, 0, .9);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: white;\r\n  font-size: 1.2rem;\r\n`;\r\n\r\nexport const GameButton = styled.button`\r\n  background-color : blue;\r\n  color: white;\r\n  border-radius: 3px;\r\n  border: 2px solid blue;\r\n  padding: .75rem 1rem;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  box-shadow: 0 0 10px black;\r\n\r\n  &:hover, &:focus, &:active {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nexport const MB1 = styled.div`\r\n  margin-bottom: 1rem;\r\n`;","import styled from 'styled-components';\r\n\r\nexport const Grid = styled.div`\r\n    height: ${props => props.size + \"px\"};\r\n    width: ${props => props.size + \"px\"};\r\n    box-sizing: content-box;\r\n    padding: 0;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n\r\n    &:hover, &:focus, &:active {\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nexport const GridCell = styled.div`\r\n    height: ${props => props.size + \"px\"};\r\n    width: ${props => props.size + \"px\"};\r\n    background-color: ${props => props.foodCell ? 'orange' : \r\n                                 props.snakeCell ? 'cyan' : \r\n                                 props.wallCell ? 'darkgray' : 'black'};\r\n    border: ${props => props.foodCell || \r\n                       props.snakeCell || \r\n                       props.wallCell ? \"1px solid black\": \"0px\"};\r\n`;","export const shallowEquals = (arr1, arr2) => {\r\n    if (!arr1 || !arr2 || arr1.length !== arr2.length) return false;\r\n    let equals = true;\r\n    for (var i = 0; i < arr1.length; i++) {\r\n        if (arr1[i] !== arr2[i]) equals = false;\r\n    }\r\n    return equals;\r\n}\r\n\r\nexport const arrayDiff = (arr1, arr2) => {\r\n    return arr1.map((a, i)=>{ \r\n        return a - arr2[i]\r\n    })\r\n}","import React from 'react';\n\n//custom imports\nimport { AppWrapper, GridWrapper, AppOverlay, GameButton, MB1 } from './components/App.component';\nimport { Grid, GridCell } from './components/Board.components';\nimport { shallowEquals, arrayDiff } from './helpers/utility';\n\n// the main view\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      snake: [],\n      food: [],\n      // 0 = not started, 1 = in progress, 2= finished\n      status: 0,\n      // using keycodes to indicate direction\n      direction: 39\n    };\n  }\n\n  componentDidMount() {\n    this.el.focus();\n  }\n\n  // randomly place snake food\n  moveFood = () => {\n    let x, y;\n\n    do x = parseInt(Math.random() * this.numCells - 1); while(x===0);\n    do y = parseInt(Math.random() * this.numCells - 1); while(y===0);\n    this.setState({ food: [x, y] });\n  }\n\n  setDirection = ({ keyCode }) => {\n\n    if (keyCode === 32 && (this.state.status === 0 || this.state.status === 2)){\n      this.startGame();\n    }else{\n      // if it's the same direction or simply reversing, ignore\n      let changeDirection = true;\n      [[38, 40], [37, 39]].forEach(dir => {\n        if (dir.indexOf(this.state.direction) > -1 && dir.indexOf(keyCode) > -1) {\n          changeDirection = false;\n        }\n      });\n\n      if (changeDirection && ( keyCode===37 || keyCode===38 || keyCode===39 || keyCode===40 )) \n        this.setState({ direction: keyCode });\n    }\n  }\n\n  moveSnake = () => {\n    const newSnake = [];\n    // set in the new \"head\" of the snake\n    switch (this.state.direction) {\n        // down\n      case 40:\n        newSnake[0] = [this.state.snake[0][0], this.state.snake[0][1] + 1];\n        break;\n        // up\n      case 38:\n        newSnake[0] = [this.state.snake[0][0], this.state.snake[0][1] - 1];\n        break;\n        // right\n      case 39:\n        newSnake[0] = [this.state.snake[0][0] + 1, this.state.snake[0][1]];\n        break;\n        // left\n      case 37:\n        newSnake[0] = [this.state.snake[0][0] - 1, this.state.snake[0][1]];\n        break;\n      default:\n    }\n    // now shift each \"body\" segment to the previous segment's position\n    [].push.apply(\n      newSnake,\n      this.state.snake.slice(1).map((s, i) => {\n        // since we're starting from the second item in the list,\n        // just use the index, which will refer to the previous item\n        // in the original list\n        return this.state.snake[i];\n      })\n    );\n\n    this.setState({ snake: newSnake });\n\n    this.checkIfAteFood(newSnake);\n    if (!this.isValid(newSnake[0]) || !this.doesntOverlap(newSnake)) {\n      // end the game\n      this.endGame()\n    } \n  }\n\n  checkIfAteFood = newSnake => {\n    if (!shallowEquals(newSnake[0], this.state.food)) return\n      // snake gets longer\n      let newSnakeSegment;\n      const lastSegment = newSnake[newSnake.length - 1];\n\n      // where should we position the new snake segment?\n      // here are some potential positions, we can choose the best looking one\n      let lastPositionOptions = [[-1, 0], [0, -1], [1, 0], [0, 1]];\n      \n      // the snake is moving along the y-axis, so try that instead\n      if ( newSnake.length > 1 ) {\n        lastPositionOptions[0] = arrayDiff(lastSegment, newSnake[newSnake.length - 2]);\n      }\n\n      for (var i = 0; i < lastPositionOptions.length; i++) {\n        newSnakeSegment = [\n          lastSegment[0] + lastPositionOptions[i][0],\n          lastSegment[1] + lastPositionOptions[i][1]\n        ];\n        if (this.isValid(newSnakeSegment)) {\n          break;\n        }\n      }\n\n      this.setState({\n        snake: newSnake.concat([newSnakeSegment]),\n        food: []\n      });\n    this.moveFood();\n  }\n  \n  // is the cell's position inside the grid?\n  isValid = cell => {\n    return (\n      cell[0] > 0 &&\n      cell[1] > 0 &&\n      cell[0] < this.numCells - 1 &&\n      cell[1] < this.numCells - 1\n    );\n  }\n\n  doesntOverlap = snake => {\n    return (\n      snake.slice(1).filter(c => {\n        return shallowEquals(snake[0], c);\n      }).length === 0\n    );\n  }\n\n  startGame = () => {\n    this.removeTimers();\n    this.moveSnakeInterval = setInterval(this.moveSnake, 50);\n    // this.moveFood();\n\n    this.setState({\n      status: 1,\n      snake: [[5, 5], [4, 5], [3, 5], [2, 5]],\n      food: [10, 10],\n      direction: 39\n    });\n    //need to focus so keydown listener will work!\n    // this.el.focus();\n  }\n  \n  endGame = () => {\n    this.removeTimers();\n    this.setState({\n      status : 2\n    })\n  }\n\n  removeTimers = () => {\n    if (this.moveSnakeInterval) clearInterval(this.moveSnakeInterval);\n    if (this.moveFoodTimeout) clearTimeout(this.moveFoodTimeout)\n  }\n\n  componentWillUnmount() {\n    this.removeTimers();\n  }\n\n  render() {\n    // each cell should be approximately 15px wide, so calculate how many we need\n    this.numCells = Math.floor(this.props.size / 15);\n    const cellSize = this.props.size / this.numCells;\n    const cellIndexes = Array.from(Array(this.numCells).keys());\n    const cells = cellIndexes.map(y => {\n      return cellIndexes.map(x => {\n        const foodCell = this.state.food[0] === x && this.state.food[1] === y;\n        let snakeCell = this.state.snake.filter(c => c[0] === x && c[1] === y);\n        snakeCell = snakeCell.length && snakeCell[0];\n        const wallCell = x === 0 || y === 0 || x === cellIndexes.length - 1 || y === cellIndexes.length - 1;\n\n        return (\n          <GridCell\n            foodCell={foodCell}\n            snakeCell={snakeCell}\n            wallCell={wallCell}\n            size={cellSize}\n            key={x + \" \" + y}\n            />\n        );\n      });\n    });\n\n    let overlay;\n    if (this.state.status === 0) {\n      overlay = (\n        <AppOverlay>\n          <GameButton onClick={this.startGame}>Start game!</GameButton>\n        </AppOverlay>\n      );\n    } else if (this.state.status === 2) {\n      overlay = (\n        <AppOverlay>\n          <MB1><b>GAME OVER!</b></MB1>\n          <MB1>Your score: {this.state.snake.length - 4} </MB1>\n          <GameButton onClick={this.startGame}>Start a new game</GameButton>\n        </AppOverlay>\n      );\n    }\n    return (\n      <AppWrapper>\n        <GridWrapper\n          onKeyDown={this.setDirection}\n          size={this.props.size}\n          ref={el => (this.el = el)}\n          tabIndex={-1}\n          >\n            {overlay}\n            <Grid size={this.props.size}>\n              {cells}\n            </Grid>\n        </GridWrapper>\n      </AppWrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App size={400} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}