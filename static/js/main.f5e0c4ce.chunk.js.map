{"version":3,"sources":["components/App.component.js","components/Board.components.js","helpers/utility.js","containers/Overlay.js","App.js","serviceWorker.js","index.js"],"names":["AppWrapper","styled","div","_templateObject","GridWrapper","_templateObject2","props","size","AppOverlay","_templateObject3","GameButton","button","_templateObject4","MB1","_templateObject5","Grid","Board_components_templateObject","GridCell","Board_components_templateObject2","foodCell","snakeCell","wallCell","shallowEquals","arr1","arr2","length","equals","i","arrayDiff","map","a","Overlay","status","react_default","createElement","onClick","startGame","snake","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","moveFood","x","y","parseInt","Math","random","numCells","isFoodOverlapSnake","setState","food","setDirection","_ref","keyCode","state","changeDirection","forEach","dir","indexOf","direction","moveSnake","newSnake","push","apply","slice","s","checkIfAteFood","isValid","doesntOverlap","endGame","newSnakeSegment","lastSegment","lastPositionOptions","concat","cell","filter","c","speed","removeTimers","moveSnakeInterval","setInterval","el","focus","clearInterval","moveFoodTimeout","clearTimeout","_this2","celldivisor","screenmode","floor","cellSize","cellIndexes","Array","from","keys","cells","key","onKeyDown","ref","tabIndex","containers_Overlay","React","Component","Boolean","window","location","hostname","match","innerHeight","innerWidth","screen","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f5e0c4ce.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const AppWrapper = styled.div`\r\n  text-align: center;\r\n  background-color: #282c34;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n`;\r\n\r\nexport const GridWrapper = styled.div`\r\n  height: ${props => props.size + \"px\"};\r\n  width: ${props => props.size + \"px\"};\r\n\r\n  &:hover, &:focus, &:active {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nexport const AppOverlay = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  top: 0;\r\n  background-color: rgb(0, 0, 0, .9);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: white;\r\n  font-size: 1.2rem;\r\n`;\r\n\r\nexport const GameButton = styled.button`\r\n  background-color : blue;\r\n  color: white;\r\n  border-radius: 3px;\r\n  border: 2px solid blue;\r\n  padding: .75rem 1rem;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  box-shadow: 0 0 10px black;\r\n\r\n  &:hover, &:focus, &:active {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nexport const MB1 = styled.div`\r\n  margin-bottom: 1rem;\r\n`;","import styled from 'styled-components';\r\n\r\nexport const Grid = styled.div`\r\n    height: ${props => props.size + \"px\"};\r\n    width: ${props => props.size + \"px\"};\r\n    box-sizing: content-box;\r\n    padding: 0;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n\r\n    &:hover, &:focus, &:active {\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nexport const GridCell = styled.div`\r\n    height: ${props => props.size + \"px\"};\r\n    width: ${props => props.size + \"px\"};\r\n    background-color: ${props => props.foodCell ? 'orange' : \r\n                                 props.snakeCell ? 'cyan' : \r\n                                 props.wallCell ? 'darkgray' : 'black'};\r\n                                 \r\n    border: ${props => props.foodCell || \r\n                       props.snakeCell || \r\n                       props.wallCell ? \"1px solid black\": \"0px\"};\r\n`;","export const shallowEquals = (arr1, arr2) => {\r\n    if (!arr1 || !arr2 || arr1.length !== arr2.length) return false;\r\n    let equals = true;\r\n    for (var i = 0; i < arr1.length; i++) {\r\n        if (arr1[i] !== arr2[i]) equals = false;\r\n    }\r\n    return equals;\r\n}\r\n\r\nexport const arrayDiff = (arr1, arr2) => {\r\n    return arr1.map((a, i)=>{ \r\n        return a - arr2[i]\r\n    })\r\n}","import React from 'react';\r\nimport { AppOverlay, GameButton, MB1 } from '../components/App.component';\r\n\r\nconst Overlay = props => {\r\n    if (props.status === 0) {\r\n        return (\r\n            <AppOverlay>\r\n                <GameButton onClick={props.startGame}>Start game!</GameButton>\r\n            </AppOverlay>\r\n        );\r\n    } else if (props.status === 2) {\r\n        return (\r\n            <AppOverlay>\r\n                <MB1><b>GAME OVER!</b></MB1>\r\n                <MB1>Your score: {props.snake.length - 4} </MB1>\r\n                <GameButton onClick={props.startGame}>Start a new game</GameButton>\r\n            </AppOverlay>\r\n        );\r\n    }else{\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default Overlay;","import React from 'react';\r\n\r\n//custom imports\r\nimport { AppWrapper, GridWrapper } from './components/App.component';\r\nimport { Grid, GridCell } from './components/Board.components';\r\nimport { shallowEquals, arrayDiff } from './helpers/utility';\r\nimport Overlay from './containers/Overlay';\r\n\r\n// the main view\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      snake: [],\r\n      food: [],\r\n      // 0 = not started, 1 = in progress, 2= finished\r\n      status: 0,\r\n      // using keycodes to indicate direction\r\n      direction: 39,\r\n      speed: 50\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.el.focus();\r\n  }\r\n\r\n  // randomly place snake food\r\n  moveFood = () => {\r\n    let x, y;\r\n\r\n    do{\r\n      //this will prevent the food from respawning in the wall\r\n      do x = parseInt(Math.random() * this.numCells - 1); while(x===0);\r\n      do y = parseInt(Math.random() * this.numCells - 1); while(y===0);\r\n\r\n      //this will prevent the food from respawning in snake body\r\n    } while(this.isFoodOverlapSnake([x, y]));\r\n    \r\n    this.setState({ food: [x, y] });\r\n  }\r\n\r\n  setDirection = ({ keyCode }) => {\r\n\r\n    if (keyCode === 32 && (this.state.status === 0 || this.state.status === 2)){\r\n      this.startGame();\r\n    }else{\r\n      // if it's the same direction or simply reversing, ignore\r\n      let changeDirection = true;\r\n      [[38, 40], [37, 39]].forEach(dir => {\r\n        if (dir.indexOf(this.state.direction) > -1 && dir.indexOf(keyCode) > -1) {\r\n          changeDirection = false;\r\n        }\r\n      });\r\n\r\n      if (changeDirection && ( keyCode===37 || keyCode===38 || keyCode===39 || keyCode===40 )) \r\n        this.setState({ direction: keyCode });\r\n    }\r\n  }\r\n\r\n  moveSnake = () => {\r\n    const newSnake = [];\r\n    // set in the new \"head\" of the snake\r\n    switch (this.state.direction) {\r\n        // down\r\n      case 40:\r\n        newSnake[0] = [this.state.snake[0][0], this.state.snake[0][1] + 1];\r\n        break;\r\n        // up\r\n      case 38:\r\n        newSnake[0] = [this.state.snake[0][0], this.state.snake[0][1] - 1];\r\n        break;\r\n        // right\r\n      case 39:\r\n        newSnake[0] = [this.state.snake[0][0] + 1, this.state.snake[0][1]];\r\n        break;\r\n        // left\r\n      case 37:\r\n        newSnake[0] = [this.state.snake[0][0] - 1, this.state.snake[0][1]];\r\n        break;\r\n      default:\r\n    }\r\n    // now shift each \"body\" segment to the previous segment's position\r\n    [].push.apply(\r\n      newSnake,\r\n      this.state.snake.slice(1).map((s, i) => {\r\n        // since we're starting from the second item in the list,\r\n        // just use the index, which will refer to the previous item\r\n        // in the original list\r\n        return this.state.snake[i];\r\n      })\r\n    );\r\n\r\n    this.setState({ snake: newSnake });\r\n\r\n    this.checkIfAteFood(newSnake);\r\n    if (!this.isValid(newSnake[0]) || !this.doesntOverlap(newSnake)) {\r\n      // end the game\r\n      this.endGame()\r\n    } \r\n  }\r\n\r\n  checkIfAteFood = newSnake => {\r\n    if (!shallowEquals(newSnake[0], this.state.food)) return\r\n      // snake gets longer\r\n      let newSnakeSegment;\r\n      const lastSegment = newSnake[newSnake.length - 1];\r\n\r\n      // where should we position the new snake segment?\r\n      // here are some potential positions, we can choose the best looking one\r\n      let lastPositionOptions = [[-1, 0], [0, -1], [1, 0], [0, 1]];\r\n      \r\n      // the snake is moving along the y-axis, so try that instead\r\n      if ( newSnake.length > 1 ) {\r\n        lastPositionOptions[0] = arrayDiff(lastSegment, newSnake[newSnake.length - 2]);\r\n      }\r\n\r\n      for (var i = 0; i < lastPositionOptions.length; i++) {\r\n        newSnakeSegment = [\r\n          lastSegment[0] + lastPositionOptions[i][0],\r\n          lastSegment[1] + lastPositionOptions[i][1]\r\n        ];\r\n        if (this.isValid(newSnakeSegment)) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      this.setState({\r\n        snake: newSnake.concat([newSnakeSegment]),\r\n        food: []\r\n      });\r\n    this.moveFood();\r\n  }\r\n  \r\n  // is the cell's position inside the grid?\r\n  isValid = cell => {\r\n    return (\r\n      cell[0] > 0 &&\r\n      cell[1] > 0 &&\r\n      cell[0] < this.numCells - 1 &&\r\n      cell[1] < this.numCells - 1\r\n    );\r\n  }\r\n\r\n  isFoodOverlapSnake = food => {\r\n    return (\r\n      this.state.snake.slice(1).filter(c => {\r\n        return shallowEquals(food, c);\r\n      }).length > 1\r\n    );\r\n  }\r\n\r\n  doesntOverlap = snake => {\r\n    return (\r\n      snake.slice(1).filter(c => {\r\n        return shallowEquals(snake[0], c);\r\n      }).length === 0\r\n    );\r\n  }\r\n\r\n  startGame = () => {\r\n    const { speed } = this.state;\r\n\r\n    this.removeTimers();\r\n    this.moveSnakeInterval = setInterval(this.moveSnake, speed);\r\n\r\n    this.setState({\r\n      status: 1,\r\n      snake: [[5, 5], [4, 5], [3, 5], [2, 5]],\r\n      food: [10, 10],\r\n      direction: 39\r\n    });\r\n\r\n    this.el.focus();\r\n  }\r\n  \r\n  endGame = () => {\r\n    this.removeTimers();\r\n    this.setState({\r\n      status : 2\r\n    })\r\n  }\r\n\r\n  removeTimers = () => {\r\n    if (this.moveSnakeInterval) clearInterval(this.moveSnakeInterval);\r\n    if (this.moveFoodTimeout) clearTimeout(this.moveFoodTimeout)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.removeTimers();\r\n  }\r\n\r\n  render() {\r\n    // each cell should be approximately 15px(web)/10px(mobile) wide, so calculate how many we need\r\n    const celldivisor = this.props.screenmode === \"web\" ? 15 : 10;\r\n    this.numCells = Math.floor(this.props.size / celldivisor);\r\n    const cellSize = this.props.size / this.numCells;\r\n    const cellIndexes = Array.from(Array(this.numCells).keys());\r\n    const cells = cellIndexes.map(y => {\r\n      return cellIndexes.map(x => {\r\n        const foodCell = this.state.food[0] === x && this.state.food[1] === y;\r\n        let snakeCell = this.state.snake.filter(c => c[0] === x && c[1] === y);\r\n        snakeCell = snakeCell.length && snakeCell[0];\r\n        const wallCell = x === 0 || y === 0 || x === cellIndexes.length - 1 || y === cellIndexes.length - 1;\r\n\r\n        return (\r\n          <GridCell\r\n            foodCell={foodCell}\r\n            snakeCell={snakeCell}\r\n            wallCell={wallCell}\r\n            size={cellSize}\r\n            key={x + \" \" + y}\r\n            />\r\n        );\r\n      });\r\n    });\r\n\r\n    return (\r\n      <AppWrapper>\r\n        <GridWrapper\r\n          onKeyDown={this.setDirection}\r\n          size={this.props.size}\r\n          ref={el => (this.el = el)}\r\n          tabIndex={-1}>\r\n            \r\n            <Overlay \r\n              status={this.state.status}\r\n              startGame={this.startGame}\r\n              snake={this.state.snake} />\r\n\r\n            <Grid size={this.props.size}>\r\n              {cells}\r\n            </Grid>\r\n        </GridWrapper>\r\n      </AppWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n//get screensize to determine grid\r\nconst { innerHeight, innerWidth } = window;\r\nconst size = innerHeight < innerWidth ? innerHeight * 0.8 : innerWidth;\r\nconst screen = innerHeight < innerWidth ? \"web\" : \"mobile\";\r\n\r\nReactDOM.render(<App size={size} screenmode={screen} />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}