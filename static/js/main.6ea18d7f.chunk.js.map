{"version":3,"sources":["components/App.components.js","components/Board.components.js","helpers/utility.js","components/Buttons.components.js","components/Animations.components.js","Assets/AppLogo/AppLogo.js","containers/Overlay.js","containers/KeyboardKeys.js","containers/BoardHeader.js","App.js","serviceWorker.js","index.js"],"names":["AppWrapper","styled","div","_templateObject","props","screenmode","KeyboardWrapper","_templateObject2","LeaderBoardsWrapper","_templateObject3","AppOverlay","_templateObject4","IntroOverlay","_templateObject5","MB1","_templateObject6","GridWrapper","Board_components_templateObject","concat","size","Grid","Board_components_templateObject2","GridCell","Board_components_templateObject3","foodCell","snakeCell","wallCell","BoardheadWrapper","Board_components_templateObject4","PlayernameWrapper","span","Board_components_templateObject5","ScoreWrapper","Board_components_templateObject6","shallowEquals","arr1","arr2","length","equals","i","arrayDiff","map","a","GameButton","button","Buttons_components_templateObject","IntroPageButton","Buttons_components_templateObject2","ArrowTableWrapper","table","Buttons_components_templateObject3","KeyboardButton","Buttons_components_templateObject4","isClicked","SpinningLoader","Animations_components_templateObject","AnimatedText","react_default","createElement","viewBox","id","textAnchor","x","y","className","xlinkHref","AppLogo","AppLogo_AnimatedText","Overlay","status","Assets_AppLogo_AppLogo","onClick","initializeGame","alert","startGame","snake","KeyboardKeys","keypressed","setDirection","keyCode","index_esm","BoardHeader","score","fa_index_esm","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","moveFood","parseInt","Math","random","numCells","foodDoesntOverlapSnake","setState","food","_ref","state","changeDirection","forEach","dir","indexOf","direction","resetKeypressed","setTimeout","moveSnake","newSnake","push","apply","slice","s","checkIfAteFood","isValid","doesntOverlap","endGame","newSnakeSegment","lastSegment","lastPositionOptions","cell","filter","c","speed","removeTimers","moveSnakeInterval","setInterval","el","focus","clearInterval","moveFoodTimeout","clearTimeout","_this2","celldivisor","floor","cellSize","cellIndexes","Array","from","keys","cells","key","onKeyDown","ref","tabIndex","containers_Overlay","containers_BoardHeader","containers_KeyboardKeys","React","Component","Boolean","window","location","hostname","match","innerHeight","innerWidth","screen","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ea18d7f.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const AppWrapper = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  top: 0;\r\n  text-align: center;\r\n  background-color: #282c34;\r\n  display: flex;\r\n  flex-direction: ${props => props.screenmode===\"web\" ? 'row' : 'column'};\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n`;\r\n\r\nexport const KeyboardWrapper = styled.div`\r\n  flex: 1;\r\n  position: relative;\r\n  height: ${props => props.screenmode===\"web\" ? '100vh': 'auto'};\r\n`;\r\n\r\nexport const LeaderBoardsWrapper = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nexport const AppOverlay = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  top: 0;\r\n  background-color: rgb(0, 0, 0, .9);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: white;\r\n  font-size: 1.2rem;\r\n  z-index: 1021;\r\n`;\r\n\r\nexport const IntroOverlay = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  top: 0;\r\n  background-color: #030321;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: white;\r\n  font-size: 1.2rem;\r\n  z-index: 1021;\r\n`;\r\n\r\nexport const MB1 = styled.div`\r\n  margin-bottom: 1rem;\r\n\r\n  ${props => props.screenmode===\"mobile\" ? `margin-top: -30%`: ''};\r\n`;","import styled from 'styled-components';\r\n\r\nexport const GridWrapper = styled.div`\r\n  ${props => `height: ${props.size}px;\r\n              width: ${props.size}px;`};\r\n\r\n  ${props => props.screenmode===\"web\" ? `\r\n            margin-top: -5%\r\n            flex: 1;` \r\n            : `\r\n            margin-top: -10%\r\n            flex: 5;`};\r\n\r\n  &:hover, &:focus, &:active {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nexport const Grid = styled.div`\r\n    box-sizing: content-box;\r\n    padding: 0;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n\r\n    ${props => `height: ${props.size}px;\r\n                width: ${props.size}px;`};\r\n\r\n    &:hover, &:focus, &:active {\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nexport const GridCell = styled.div`\r\n    ${props => `height: ${props.size}px;\r\n                width: ${props.size}px;`};\r\n\r\n    background-color: ${props => props.foodCell ? 'orange' : \r\n                                 props.snakeCell ? 'cyan' : \r\n                                 props.wallCell ? 'darkgray' : 'black'};\r\n                                 \r\n    border: ${props => props.foodCell || \r\n                       props.snakeCell || \r\n                       props.wallCell ? \"1px solid black\": \"0px\"};\r\n`;\r\n\r\nexport const BoardheadWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    flex-direction: row;\r\n    margin-bottom: 7px;\r\n    ${props => props.screenmode===\"mobile\" ? `\r\n            margin-left: 5%;\r\n            width: 90%;\r\n            font-size: 1rem;`\r\n            : `\r\n            width: 100%;\r\n            font-size: 1.5rem;`};\r\n`;\r\n\r\nexport const PlayernameWrapper = styled.span`\r\n    color: orange;\r\n    font-weight: 600;\r\n    margin-left: 5px;\r\n`;\r\n\r\nexport const ScoreWrapper = styled.div`\r\n    color: yellow;\r\n    font-weight: 600;\r\n`;","export const shallowEquals = (arr1, arr2) => {\r\n    if (!arr1 || !arr2 || arr1.length !== arr2.length) return false;\r\n    let equals = true;\r\n    for (var i = 0; i < arr1.length; i++) {\r\n        if (arr1[i] !== arr2[i]) equals = false;\r\n    }\r\n    return equals;\r\n}\r\n\r\nexport const arrayDiff = (arr1, arr2) => {\r\n    return arr1.map((a, i)=>{ \r\n        return a - arr2[i]\r\n    })\r\n}","import styled from 'styled-components';\r\n\r\nexport const GameButton = styled.button`\r\n    background-color : blue;\r\n    color: white;\r\n    border-radius: 3px;\r\n    border: 2px solid blue;\r\n    padding: .75rem 1rem;\r\n    font-size: 1rem;\r\n    cursor: pointer;\r\n    box-shadow: 0 0 10px black;\r\n\r\n    ${props => props.screenmode===\"mobile\" ? `margin-top: -30%`: ''};\r\n\r\n    &:hover, &:focus, &:active {\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nexport const IntroPageButton = styled.button`\r\n    width: 250px;\r\n    background-color : #003d98;\r\n    color: white;\r\n    border-radius: 50px;\r\n    border: 0;\r\n    padding: 1rem 1rem;\r\n    font-size: 1rem;\r\n    cursor: pointer;\r\n    box-shadow: 0 0 10px black;\r\n    letter-spacing: 0.2rem;\r\n\r\n    &:hover, &:focus, &:active {\r\n        background-color : #002356;\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nexport const ArrowTableWrapper = styled.table`\r\n    border: 0;\r\n    position: absolute;\r\n    left: 50%;\r\n    margin-left: -126px;\r\n    bottom: ${props => props.screenmode===\"web\" ? '3.5rem': '0.4rem' };\r\n    border-spacing: 0;\r\n    border-collapse: collapse;\r\n`;\r\n\r\nexport const KeyboardButton = styled.button`\r\n    color: rgb(51, 51, 51);\r\n    border-radius: 3px;\r\n    border: 0;\r\n    cursor: pointer;\r\n    margin: 0.3rem;\r\n    background-color : ${props => props.isClicked ? '#A9A9A9' : '#eee' };\r\n    padding: ${props => props.screenmode===\"web\" ? \"1.25rem 1.5rem\" : \"1rem 1.5rem\"};\r\n    font-size: ${props => props.screenmode==='web' ? '2rem' : '1.5rem'};\r\n    /* box-shadow: 0 0 10px black; */\r\n\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n\r\n    &:hover, &:active {\r\n        outline: none;\r\n        background-color : #A9A9A9;\r\n    }\r\n`;","import styled from 'styled-components';\r\n\r\nexport const SpinningLoader = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 64px;\r\n    height: 64px;\r\n\r\n    &:after {\r\n        content: \" \";\r\n        display: block;\r\n        border-radius: 50%;\r\n        width: 0;\r\n        height: 0;\r\n        margin: 6px;\r\n        box-sizing: border-box;\r\n        border: 26px solid #fff;\r\n        border-color: #fff transparent #fff transparent;\r\n        animation: lds-hourglass 1.2s infinite;\r\n    }\r\n\r\n    @keyframes lds-hourglass {\r\n        0% {\r\n            transform: rotate(0);\r\n            animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);\r\n        }\r\n        50% {\r\n            transform: rotate(900deg);\r\n            animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\r\n        }\r\n        100% {\r\n            transform: rotate(1800deg);\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport './AppLogo.css';\r\n\r\nconst AnimatedText = () => {\r\n    return (\r\n        <svg viewBox=\"0 0 500 156\">\r\n            <symbol id=\"s-text\">\r\n                <text textAnchor=\"middle\" x=\"50%\" y=\"50%\">React-Snek</text>\r\n            </symbol>\r\n\r\n            <g className=\"g-ants\">\r\n                <use xlinkHref=\"#s-text\" className=\"text-copy\"></use>\r\n                <use xlinkHref=\"#s-text\" className=\"text-copy\"></use>\r\n                <use xlinkHref=\"#s-text\" className=\"text-copy\"></use>\r\n                <use xlinkHref=\"#s-text\" className=\"text-copy\"></use>\r\n                <use xlinkHref=\"#s-text\" className=\"text-copy\"></use>\r\n            </g>\r\n        </svg>\r\n    )\r\n}\r\n\r\nconst AppLogo = () => {\r\n    return (\r\n        <div className=\"logo-background\">\r\n            <div className=\"svg-wrapper\"><AnimatedText /></div>\r\n            <div className=\"logo-subtext\">Classic Snake Online</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppLogo;","import React from 'react';\r\nimport { AppOverlay, IntroOverlay, MB1 } from '../components/App.components';\r\nimport { GameButton, IntroPageButton } from '../components/Buttons.components';\r\nimport { SpinningLoader } from '../components/Animations.components';\r\n\r\nimport AppLogo from '../Assets/AppLogo/AppLogo';\r\n\r\nconst Overlay = props => {\r\n    if (props.status === \"intro\") {\r\n        return (\r\n            <IntroOverlay>\r\n                <AppLogo />\r\n                <br /> <br />\r\n                <MB1>\r\n                    <IntroPageButton onClick={props.initializeGame}>Play Game!</IntroPageButton>\r\n                </MB1>\r\n                <MB1>\r\n                    <IntroPageButton onClick={() => alert(\"This feature is not yet available\")}>LeaderBoards</IntroPageButton>\r\n                </MB1>\r\n            </IntroOverlay>\r\n        );\r\n    } else if (props.status === \"loading\") {\r\n            return (\r\n                <AppOverlay>\r\n                    <MB1><SpinningLoader /></MB1>\r\n                    <MB1>Initializing game...</MB1>\r\n                </AppOverlay>\r\n            );\r\n    } else if (props.status === \"standby\") {\r\n        return (\r\n            <AppOverlay>\r\n                <GameButton onClick={props.startGame} screenmode={props.screenmode}>\r\n                    Start game!\r\n                </GameButton>\r\n            </AppOverlay>\r\n        );\r\n    } else if (props.status === \"end\") {\r\n        return (\r\n            <AppOverlay>\r\n                <MB1 screenmode={props.screenmode}><b>GAME OVER!</b></MB1>\r\n                <MB1>Your score: {props.snake.length - 4} </MB1>\r\n                <GameButton onClick={props.startGame}>Start a new game</GameButton>\r\n            </AppOverlay>\r\n        );\r\n    }else{\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default Overlay;","import React from 'react';\r\nimport { KeyboardButton, ArrowTableWrapper } from '../components/Buttons.components';\r\nimport { IoMdArrowDropup, IoMdArrowDropdown, IoMdArrowDropleft, IoMdArrowDropright } from 'react-icons/io';\r\n\r\nconst KeyboardKeys = props => {\r\n\r\n    return (\r\n        <ArrowTableWrapper screenmode={props.screenmode}>\r\n            <tbody>\r\n                <tr>\r\n                    <td></td>\r\n                    <td>\r\n                        <KeyboardButton \r\n                            screenmode={props.screenmode}\r\n                            isClicked={props.keypressed===38}\r\n                            onClick={() => props.setDirection({keyCode: 38})}>\r\n                            <IoMdArrowDropup />\r\n                        </KeyboardButton>\r\n                    </td>\r\n                    <td></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <KeyboardButton \r\n                            screenmode={props.screenmode}\r\n                            isClicked={props.keypressed===37}\r\n                            onClick={() => props.setDirection({keyCode: 37})}>\r\n                            <IoMdArrowDropleft />\r\n                        </KeyboardButton>\r\n                    </td>\r\n                    <td>\r\n                        <KeyboardButton \r\n                            screenmode={props.screenmode}\r\n                            isClicked={props.keypressed===40}\r\n                            onClick={() => props.setDirection({keyCode: 40})}>\r\n                            <IoMdArrowDropdown />\r\n                        </KeyboardButton>\r\n                    </td>\r\n                    <td>\r\n                        <KeyboardButton \r\n                            screenmode={props.screenmode}\r\n                            isClicked={props.keypressed===39}\r\n                            onClick={() => props.setDirection({keyCode: 39})}>\r\n                            <IoMdArrowDropright />\r\n                        </KeyboardButton>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </ArrowTableWrapper>\r\n    )\r\n}\r\n\r\nexport default KeyboardKeys;\r\n","import React from 'react';\r\nimport { BoardheadWrapper, PlayernameWrapper, ScoreWrapper } from '../components/Board.components';\r\n\r\nimport { FaStar } from 'react-icons/fa';\r\n\r\nconst BoardHeader = props => {\r\n    const score = props.snake.length - 4 > -1 ? props.snake.length - 4: 0;\r\n\r\n    return (\r\n        <BoardheadWrapper screenmode={props.screenmode}>\r\n            <div>Playing as \r\n                <PlayernameWrapper>Anonymous</PlayernameWrapper>\r\n            </div>\r\n            <ScoreWrapper>\r\n                <FaStar /> {score}\r\n            </ScoreWrapper>\r\n        </BoardheadWrapper>\r\n    );\r\n}\r\n\r\nexport default BoardHeader;","import React from 'react';\r\n\r\n//custom imports\r\nimport { AppWrapper, KeyboardWrapper, LeaderBoardsWrapper } from './components/App.components';\r\nimport { GridWrapper, Grid, GridCell } from './components/Board.components';\r\nimport { shallowEquals, arrayDiff } from './helpers/utility';\r\n\r\nimport Overlay from './containers/Overlay';\r\nimport KeyboardKeys from './containers/KeyboardKeys';\r\nimport BoardHeader from './containers/BoardHeader';\r\n\r\n// the main view\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      snake: [],\r\n      food: [],\r\n      // [intro, loading, standby, ingame, end]\r\n      status: \"intro\",\r\n      // using keycodes to indicate direction\r\n      direction: 39,\r\n      keypressed: 0,\r\n      speed: this.props.screenmode===\"web\" ? 50 : 150\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.el.focus();\r\n  }\r\n\r\n  // randomly place snake food\r\n  moveFood = () => {\r\n    let x, y;\r\n\r\n    do{\r\n      //this will prevent the food from respawning in the wall\r\n      do x = parseInt(Math.random() * this.numCells - 1); while(x===0);\r\n      do y = parseInt(Math.random() * this.numCells - 1); while(y===0);\r\n\r\n      //this will prevent the food from respawning in snake body\r\n    } while(!this.foodDoesntOverlapSnake([x, y]));\r\n    \r\n    this.setState({ food: [x, y] });\r\n  }\r\n\r\n  setDirection = ({ keyCode }) => {\r\n\r\n    if (keyCode === 32 && (this.state.status === \"standby\" || this.state.status === \"end\")){\r\n      this.startGame();\r\n    }else{\r\n      // if it's the same direction or simply reversing, ignore\r\n      let changeDirection = true;\r\n      [[38, 40], [37, 39]].forEach(dir => {\r\n        if (dir.indexOf(this.state.direction) > -1 && dir.indexOf(keyCode) > -1) {\r\n          changeDirection = false;\r\n        }\r\n      });\r\n\r\n      if ( keyCode===37 || keyCode===38 || keyCode===39 || keyCode===40 ) {\r\n        if (changeDirection) {\r\n          this.setState({ direction: keyCode, keypressed: keyCode }, () => this.resetKeypressed());\r\n        }else{\r\n          this.setState({ keypressed: keyCode }, () => this.resetKeypressed());\r\n        }\r\n      } \r\n    }\r\n  }\r\n\r\n  //this will reset the focus of arrow buttons\r\n  resetKeypressed = () => {\r\n    setTimeout(() => this.setState({keypressed: 0}), 30)\r\n  }\r\n\r\n  initializeGame = () => {\r\n    this.setState({ status: \"loading\" }, () => \r\n      setTimeout(() => this.setState({status: \"standby\"}), 2600));\r\n  }\r\n\r\n  moveSnake = () => {\r\n    const newSnake = [];\r\n    // set in the new \"head\" of the snake\r\n    switch (this.state.direction) {\r\n        // down\r\n      case 40:\r\n        newSnake[0] = [this.state.snake[0][0], this.state.snake[0][1] + 1];\r\n        break;\r\n        // up\r\n      case 38:\r\n        newSnake[0] = [this.state.snake[0][0], this.state.snake[0][1] - 1];\r\n        break;\r\n        // right\r\n      case 39:\r\n        newSnake[0] = [this.state.snake[0][0] + 1, this.state.snake[0][1]];\r\n        break;\r\n        // left\r\n      case 37:\r\n        newSnake[0] = [this.state.snake[0][0] - 1, this.state.snake[0][1]];\r\n        break;\r\n      default:\r\n    }\r\n    // now shift each \"body\" segment to the previous segment's position\r\n    [].push.apply(\r\n      newSnake,\r\n      this.state.snake.slice(1).map((s, i) => {\r\n        // since we're starting from the second item in the list,\r\n        // just use the index, which will refer to the previous item\r\n        // in the original list\r\n        return this.state.snake[i];\r\n      })\r\n    );\r\n\r\n    this.setState({ snake: newSnake });\r\n\r\n    this.checkIfAteFood(newSnake);\r\n    if (!this.isValid(newSnake[0]) || !this.doesntOverlap(newSnake)) {\r\n      // end the game\r\n      this.endGame()\r\n    } \r\n  }\r\n\r\n  checkIfAteFood = newSnake => {\r\n    if (!shallowEquals(newSnake[0], this.state.food)) return\r\n      // snake gets longer\r\n      let newSnakeSegment;\r\n      const lastSegment = newSnake[newSnake.length - 1];\r\n\r\n      // where should we position the new snake segment?\r\n      // here are some potential positions, we can choose the best looking one\r\n      let lastPositionOptions = [[-1, 0], [0, -1], [1, 0], [0, 1]];\r\n      \r\n      // the snake is moving along the y-axis, so try that instead\r\n      if ( newSnake.length > 1 ) {\r\n        lastPositionOptions[0] = arrayDiff(lastSegment, newSnake[newSnake.length - 2]);\r\n      }\r\n\r\n      for (var i = 0; i < lastPositionOptions.length; i++) {\r\n        newSnakeSegment = [\r\n          lastSegment[0] + lastPositionOptions[i][0],\r\n          lastSegment[1] + lastPositionOptions[i][1]\r\n        ];\r\n        if (this.isValid(newSnakeSegment)) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      this.setState({\r\n        snake: newSnake.concat([newSnakeSegment]),\r\n        food: []\r\n      });\r\n    this.moveFood();\r\n  }\r\n  \r\n  // is the cell's position inside the grid?\r\n  isValid = cell => {\r\n    return (\r\n      cell[0] > 0 &&\r\n      cell[1] > 0 &&\r\n      cell[0] < this.numCells - 1 &&\r\n      cell[1] < this.numCells - 1\r\n    );\r\n  }\r\n\r\n  foodDoesntOverlapSnake = food => {\r\n    return (\r\n      this.state.snake.slice(1).filter(c => {\r\n        return shallowEquals(food, c);\r\n      }).length === 0\r\n    );\r\n  }\r\n\r\n  doesntOverlap = snake => {\r\n    return (\r\n      snake.slice(1).filter(c => {\r\n        return shallowEquals(snake[0], c);\r\n      }).length === 0\r\n    );\r\n  }\r\n\r\n  startGame = () => {\r\n    const { speed } = this.state;\r\n\r\n    this.removeTimers();\r\n    this.moveSnakeInterval = setInterval(this.moveSnake, speed);\r\n\r\n    this.setState({\r\n      status: \"ingame\",\r\n      snake: [[5, 5], [4, 5], [3, 5], [2, 5]],\r\n      food: [10, 10],\r\n      direction: 39\r\n    });\r\n\r\n    this.el.focus();\r\n  }\r\n  \r\n  endGame = () => {\r\n    this.removeTimers();\r\n    this.setState({\r\n      status : \"end\"\r\n    })\r\n  }\r\n\r\n  removeTimers = () => {\r\n    if (this.moveSnakeInterval) clearInterval(this.moveSnakeInterval);\r\n    if (this.moveFoodTimeout) clearTimeout(this.moveFoodTimeout)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.removeTimers();\r\n  }\r\n\r\n  render() {\r\n    // each cell should be approximately 15px(web)/10px(mobile) wide, so calculate how many we need\r\n    const celldivisor = this.props.screenmode === \"web\" ? 15 : 10;\r\n    this.numCells = Math.floor(this.props.size / celldivisor);\r\n    const cellSize = this.props.size / this.numCells;\r\n    const cellIndexes = Array.from(Array(this.numCells).keys());\r\n    const cells = cellIndexes.map(y => {\r\n      return cellIndexes.map(x => {\r\n        const foodCell = this.state.food[0] === x && this.state.food[1] === y;\r\n        let snakeCell = this.state.snake.filter(c => c[0] === x && c[1] === y);\r\n        snakeCell = snakeCell.length && snakeCell[0];\r\n        const wallCell = x === 0 || y === 0 || x === cellIndexes.length - 1 || y === cellIndexes.length - 1;\r\n\r\n        return (\r\n          <GridCell\r\n            foodCell={foodCell}\r\n            snakeCell={snakeCell}\r\n            wallCell={wallCell}\r\n            size={cellSize}\r\n            key={x + \" \" + y}\r\n            />\r\n        );\r\n      });\r\n    });\r\n\r\n    return (\r\n      <AppWrapper screenmode={this.props.screenmode} >\r\n        <LeaderBoardsWrapper>\r\n          LeaderBoards Coming Soon\r\n        </LeaderBoardsWrapper>\r\n\r\n        <GridWrapper\r\n          screenmode={this.props.screenmode}\r\n          onKeyDown={this.setDirection}\r\n          size={this.props.size}\r\n          ref={el => (this.el = el)}\r\n          tabIndex={-1}>\r\n            \r\n            <Overlay \r\n              screenmode={this.props.screenmode}\r\n              status={this.state.status}\r\n              startGame={this.startGame}\r\n              initializeGame={this.initializeGame}\r\n              snake={this.state.snake} />\r\n\r\n            <BoardHeader \r\n              screenmode={this.props.screenmode}\r\n              snake={this.state.snake} />\r\n\r\n            <Grid size={this.props.size}>\r\n              {cells}\r\n            </Grid>\r\n            \r\n        </GridWrapper>\r\n\r\n        <KeyboardWrapper screenmode={this.props.screenmode}>\r\n          <KeyboardKeys \r\n            setDirection={this.setDirection} \r\n            keypressed={this.state.keypressed}\r\n            screenmode={this.props.screenmode} />\r\n        </KeyboardWrapper>\r\n\r\n      </AppWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n//get screensize to determine grid\r\nconst { innerHeight, innerWidth } = window;\r\nconst size = innerHeight < innerWidth ? innerHeight * 0.8 : innerWidth;\r\nconst screen = innerHeight < innerWidth ? \"web\" : \"mobile\";\r\n\r\nReactDOM.render(<App size={size} screenmode={screen} />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}